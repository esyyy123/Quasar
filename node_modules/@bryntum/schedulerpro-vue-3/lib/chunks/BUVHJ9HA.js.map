{"version":3,"file":"BUVHJ9HA.js","sources":["../../src/components/BryntumTimeline.vue"],"sourcesContent":["<!-- Vue 3 wrapper for Bryntum Timeline -->\n\n<template>\n    <div ref=\"refElement\">\n\n    </div>\n</template>\n\n<script setup lang=\"ts\">\n/* eslint-disable no-undef */\n\nimport { getCurrentInstance, onBeforeUnmount, onMounted, provide, ref, watch, toRaw } from 'vue';\n\nimport type { AjaxStore, AjaxStoreConfig, Base, CellCopyPaste, CellCopyPasteConfig, CellMenu, CellMenuConfig, CellTooltip, CellTooltipConfig, Column, ColumnAutoWidth, ColumnAutoWidthConfig, ColumnDragToolbar, ColumnDragToolbarConfig, ColumnLines, ColumnLinesConfig, ColumnPicker, ColumnPickerConfig, ColumnRename, ColumnRenameConfig, ColumnReorder, ColumnReorderConfig, ColumnResize, ColumnResizeConfig, ColumnStore, ColumnStoreConfig, Container, ContainerItemConfig, CrudManager, CrudManagerConfig, DateConstraint, DependencyBaseModel, DependencyStoreConfig, DomClassList, DomConfig, DropData, DurationConfig, DurationUnit, Editor, EventColor, EventCopyPaste, EventCopyPasteConfig, EventDrag, EventDragConfig, EventDragCreate, EventDragCreateConfig, EventDragSelect, EventDragSelectConfig, EventEdit, EventEditConfig, EventFilter, EventFilterConfig, EventMenu, EventMenuConfig, EventNonWorkingTime, EventNonWorkingTimeConfig, EventResizeData, EventTooltip, EventTooltipConfig, ExcelExporter, ExcelExporterConfig, ExportConfig, Field, FileDrop, FileDropConfig, FillHandle, FillHandleConfig, Filter, FilterBar, FilterBarConfig, FilterConfig, Grid, GridBase, GridCellEdit, GridCellEditConfig, GridColumnConfig, GridLocation, GridLocationConfig, GridSelectionMode, Group, GroupConfig, GroupSummary, GroupSummaryConfig, HeaderMenu, HeaderMenuConfig, HeaderZoom, HeaderZoomConfig, Labels, LabelsConfig, LockRows, LockRowsConfig, Mask, MaskConfig, Menu, MenuItem, MenuItemConfig, MergeCells, MergeCellsConfig, Model, ModelConfig, NonWorkingTime, NonWorkingTimeConfig, PagingToolbarConfig, Pan, PanConfig, Panel, PanelCollapserConfig, PanelCollapserOverlayConfig, PanelHeader, PdfExport, PdfExportConfig, Popup, PreserveScrollOptions, Print, PrintConfig, ProjectModel, ProjectModelConfig, QuickFind, QuickFindConfig, RecordPositionContext, RegionResize, RegionResizeConfig, ResourceHeaderConfig, ResourceMarginConfig, ResourceMenu, ResourceMenuConfig, ResourceTimeRangeModel, ResourceTimeRangeModelConfig, ResourceTimeRangeStore, ResourceTimeRangeStoreConfig, ResourceTimeRanges, ResourceTimeRangesConfig, Row, RowCopyPaste, RowCopyPasteConfig, RowExpander, RowExpanderConfig, RowReorder, RowReorderConfig, RowResize, RowResizeConfig, ScheduleContext, ScheduleContextConfig, ScheduleMenu, ScheduleMenuConfig, ScheduleTooltip, ScheduleTooltipConfig, Scheduler, SchedulerAssignmentModel, SchedulerAssignmentModelConfig, SchedulerAssignmentStore, SchedulerAssignmentStoreConfig, SchedulerDependencies, SchedulerDependenciesConfig, SchedulerDependencyEdit, SchedulerDependencyEditConfig, SchedulerDependencyModel, SchedulerDependencyModelConfig, SchedulerDependencyStore, SchedulerEventModel, SchedulerEventModelConfig, SchedulerEventResize, SchedulerEventResizeConfig, SchedulerEventStore, SchedulerEventStoreConfig, SchedulerResourceModel, SchedulerResourceModelConfig, SchedulerResourceStore, SchedulerResourceStoreConfig, ScrollButtons, ScrollButtonsConfig, ScrollManager, ScrollManagerConfig, Scroller, ScrollerConfig, Search, SearchConfig, SimpleEventEdit, SimpleEventEditConfig, Sort, SortConfig, Split, SplitConfig, StateProvider, StickyCells, StickyCellsConfig, StickyEvents, StickyEventsConfig, Store, StoreConfig, Stripe, StripeConfig, SubGrid, SubGridConfig, Summary, SummaryConfig, TabConfig, TimeAxis, TimeAxisColumn, TimeAxisConfig, TimeAxisHeaderMenu, TimeAxisHeaderMenuConfig, TimeRanges, TimeRangesConfig, TimeSelection, TimeSelectionConfig, TimeSpan, TimeSpanConfig, TimelineBase, TimelineContext, TimelineListeners, Tool, ToolConfig, ToolbarConfig, TooltipConfig, Tree, TreeConfig, TreeGroup, TreeGroupConfig, VerticalTimeAxisColumn, VerticalTimeAxisColumnConfig, ViewPreset, ViewPresetConfig, VisibleDate, Widget } from '@bryntum/schedulerpro';\nimport { Timeline } from '@bryntum/schedulerpro';\n\nimport { WrapperHelper } from '../helper/WrapperHelper';\n\nconst props = defineProps<{\n    // Configs\n    /**\n     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's\n     * content will be placed inside this element.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-adopt)\n     */\n    adopt ? : HTMLElement|string\n    /**\n     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a\n     * flexbox layout. This config allows you to set this widget's\n     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.\n     */\n    alignSelf ? : string\n    /**\n     * Set to `false` to not allow creating dependencies\n     */\n    allowCreate ? : Boolean\n    /**\n     * `false` to require a drop on a target event bar side circle to define the dependency type.\n     * If dropped on the event bar, the `defaultValue` of the DependencyModel `type` field will be used to\n     * determine the target task side.\n     */\n    allowDropOnEventBar ? : Boolean\n    /**\n     * Set to `false` if you don't want to allow events overlapping times for any one resource (defaults to `true`).\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-allowOverlap)\n     */\n    allowOverlap ? : Boolean\n    /**\n     * Set to `false` to prevent remove row animation and remove the delay related to that.\n     */\n    animateRemovingRows ? : Boolean\n    /**\n     * When the [Tree](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/Tree) feature is in use and the Store is a tree store, this\n     * config may be set to `true` to visually animate branch node expand and collapse operations.\n     * *This is not supported in Scheduler and Gantt*\n     */\n    animateTreeNodeToggle ? : Boolean\n    /**\n     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at\n     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-element).\n     */\n    appendTo ? : HTMLElement|string\n    /**\n     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject\n     * into an element which will be linked using the `aria-describedby` attribute.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-ariaDescription)\n     */\n    ariaDescription ? : string\n    /**\n     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as\n     * the `aria-label` attribute.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-ariaLabel)\n     */\n    ariaLabel ? : string\n    /**\n     * The `aria-live` value for this widget.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-ariaLive)\n     */\n    ariaLive ? : string\n    /**\n     * Inline assignments, will be loaded into an internally created AssignmentStore.\n     */\n    assignments ? : SchedulerAssignmentModel[]|object[]|SchedulerAssignmentModelConfig[]\n    /**\n     * The optional [AssignmentStore](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/data/AssignmentStore), holding assignments between resources and events.\n     * Required for multi assignments.\n     */\n    assignmentStore ? : SchedulerAssignmentStore|SchedulerAssignmentStoreConfig\n    /**\n     * You can set this option to `false` to make the timeline panel start and end on the exact provided\n     * [startDate](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineBase#config-startDate)/[endDate](#Scheduler/view/TimelineBase#config-endDate) w/o adjusting them.\n     */\n    autoAdjustTimeAxis ? : Boolean\n    /**\n     * Automatically set grids height to fit all rows (no scrolling in the grid). In general you should avoid\n     * using `autoHeight: true`, since it will bypass Grids virtual rendering and render all rows at once, which\n     * in a larger grid is really bad for performance.\n     */\n    autoHeight ? : Boolean\n    /**\n     * Controls how much space to leave between stacked event bars in px.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-barMargin)\n     */\n    barMargin ? : number\n    /**\n     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Toolbar),\n     * or array of config objects representing the child items of a Toolbar. Another way to add a bbar is to use [strips](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips).\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-bbar)\n     */\n    bbar ? : (ContainerItemConfig|string)[]|ToolbarConfig|PagingToolbarConfig\n    /**\n     * Custom CSS classes to add to the panel's body element.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-bodyCls)\n     */\n    bodyCls ? : string|object\n    /**\n     * An object where property names with a truthy value indicate which events should bubble up the ownership\n     * hierarchy when triggered.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-bubbleEvents)\n     */\n    bubbleEvents ? : object\n    /**\n     * This config defines the size of the start and end invisible parts of the timespan when [infiniteScroll](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineScroll#config-infiniteScroll) set to `true`.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-bufferCoef)\n     */\n    bufferCoef ? : number\n    /**\n     * This config defines the scroll limit, which, when exceeded will cause a timespan shift.\n     * The limit is calculated as the `panelWidth * [bufferCoef](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineScroll#config-bufferCoef) * bufferThreshold`. During scrolling, if the left or right side\n     * has less than that of the rendered content - a shift is triggered.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-bufferThreshold)\n     */\n    bufferThreshold ? : number\n    /**\n     * Set to `false` to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-callOnFunctions)\n     */\n    callOnFunctions ? : Boolean\n    /**\n     * Custom CSS classes to add to element.\n     * May be specified as a space separated string, or as an object in which property names\n     * with truthy values are used as the class names:\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-cls)\n     */\n    cls ? : string|object\n    /**\n     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is\n     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsible).\n     */\n    collapsed ? : Boolean\n    /**\n     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsed).\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-collapsible)\n     */\n    collapsible ? : Boolean|PanelCollapserConfig|PanelCollapserOverlayConfig\n    /**\n     * Set to `false` to not show column lines. End result might be overruled by/differ between themes.\n     */\n    columnLines ? : Boolean\n    /**\n     * Accepts column definitions for the grid during initialization. They will be used to create\n     * [Column](https://bryntum.com/products/schedulerpro/docs/api/Grid/column/Column) instances that are added to a [ColumnStore](#Grid/data/ColumnStore).\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-columns)\n     */\n    columns ? : ColumnStore|GridColumnConfig[]|ColumnStoreConfig\n    config ? : object\n    /**\n     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-contentElement).\n     * May be specified as a space separated string, or as an object in which property names\n     * with truthy values are used as the class names:\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-contentElementCls)\n     */\n    contentElementCls ? : string|object\n    /**\n     * Event which is used to show context menus.\n     * Available options are: 'contextmenu', 'click', 'dblclick'.\n     */\n    contextMenuTriggerEvent ? : 'contextmenu'|'click'|'dblclick'\n    /**\n     * If true, a new event will be created when user double-clicks on a time axis cell (if scheduler is not in\n     * read only mode).\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-createEventOnDblClick)\n     * @param {boolean} createEventOnDblClick.useEventModelDefaults set to `true` to set default duration based on the defaults specified by the [duration](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/EventModel#field-duration) and [durationUnit](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/EventModel#field-durationUnit) fields.\n     */\n    createEventOnDblClick ? : Boolean|{createEventOnDblClick: { useEventModelDefaults?: Boolean }}\n    /**\n     * A tooltip config object that will be applied to the dependency creation [Tooltip](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip)\n     */\n    creationTooltip ? : TooltipConfig\n    /**\n     * A template function that will be called to generate the HTML contents of the dependency creation tooltip.\n     * You can return either an HTML string or a [DomConfig](https://bryntum.com/products/schedulerpro/docs/api/Core/helper/DomHelper#typedef-DomConfig) object.\n     * @param {object} data Data about the dependency being created\n     * @param {TimeSpan} data.source The from event\n     * @param {TimeSpan} data.target The target event\n     * @param {string} data.fromSide The from side (start, end, top, bottom)\n     * @param {string} data.toSide The target side (start, end, top, bottom)\n     * @param {boolean} data.valid The validity of the dependency\n     * @returns {string|DomConfig}\n     */\n    creationTooltipTemplate ? : (data: { source: TimeSpan, target: TimeSpan, fromSide: string, toSide: string, valid: Boolean }) => string|DomConfig\n    /**\n     * Supply a [CrudManager](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/data/CrudManager) instance or a config object if you want to use\n     * CrudManager for handling data.\n     */\n    crudManager ? : CrudManagerConfig|CrudManager\n    /**\n     * Class that should be used to instantiate a CrudManager in case it's provided as a simple object to\n     * [crudManager](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/SchedulerStores#config-crudManager) config.\n     */\n    crudManagerClass ? : typeof CrudManager\n    /**\n     * Convenient shortcut to set data in grids store both during initialization and at runtime. Can also be\n     * used to retrieve data at runtime, although we do recommend interacting with Grids store instead using\n     * the [store](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/GridBase#property-store) property.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-data)\n     */\n    data ? : object[]|Model[]|ModelConfig[]\n    /**\n     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)\n     */\n    dataset ? : Record<string, string>\n    /**\n     * The date to display when used as a component of a Calendar.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-date)\n     */\n    date ? : Date\n    /**\n     * A [DateHelper](https://bryntum.com/products/schedulerpro/docs/api/Core/helper/DateHelper) format string to use to create date output for view descriptions.\n     */\n    dateFormat ? : string\n    /**\n     * A string used to separate start and end dates in the [descriptionFormat](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/Describable#config-descriptionFormat).\n     */\n    dateSeparator ? : string\n    /**\n     * Region to which columns are added when they have none specified\n     */\n    defaultRegion ? : string\n    /**\n     * Generic resource image, used when provided `imageUrl` or `image` fields or path calculated from resource\n     * name are all invalid. If left blank, resource name initials will be shown when no image can be loaded.\n     */\n    defaultResourceImageName ? : string\n    /**\n     * Inline dependencies, will be loaded into an internally created DependencyStore.\n     */\n    dependencies ? : SchedulerDependencyModel[]|SchedulerDependencyModelConfig[]\n    /**\n     * The optional [DependencyStore](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/data/DependencyStore).\n     */\n    dependencyStore ? : SchedulerDependencyStore|DependencyStoreConfig\n    /**\n     * The date format used by the default [descriptionRenderer](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer) for rendering the view's description.\n     * If this value is `null`, the [dateFormat](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/Describable#config-dateFormat) (and potentially [dateSeparator](#Scheduler/view/mixin/Describable#config-dateSeparator)) will\n     * be used.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-descriptionFormat)\n     */\n    descriptionFormat ? : string|string[]|Boolean[]\n    /**\n     * A function that provides the textual description for this view. If provided, this function overrides the\n     * [descriptionFormat](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/Describable#config-descriptionFormat).\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-descriptionRenderer)\n     * @param {Widget} view The active view in case the function is in another scope.\n     * @returns {string} Description string\n     */\n    descriptionRenderer ? : (view: Widget) => string\n    /**\n     * Configure as `false` to preserve selection when clicking the empty schedule area.\n     */\n    deselectAllOnScheduleClick ? : Boolean\n    /**\n     * Configure as `true` to deselect a selected event upon click.\n     */\n    deselectOnClick ? : Boolean\n    /**\n     * Set to `true` to destroy the store when the grid is destroyed.\n     */\n    destroyStore ? : Boolean\n    /**\n     * Configure as `true` to destroy the Project and stores when `this` is destroyed.\n     */\n    destroyStores ? : Boolean\n    /**\n     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget\n     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-disabled)\n     */\n    disabled ? : Boolean|'inert'\n    /**\n     * Set to `true` to not get a warning when calling [getState](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/GridBase#function-getState) when there is a column\n     * configured without an `id`. But the recommended action is to always configure columns with an `id` when\n     * using states.\n     */\n    disableGridColumnIdWarning ? : Boolean\n    /**\n     * Set to `true` to not get a warning when using another base class than GridRowModel for your grid data. If\n     * you do, and would like to use the full feature set of the grid then include the fields from GridRowModel\n     * in your model definition.\n     */\n    disableGridRowModelWarning ? : Boolean\n    /**\n     * Defines how dates will be formatted in tooltips etc. This config has priority over similar config on the\n     * view preset. For allowed values see [format](https://bryntum.com/products/schedulerpro/docs/api/Core/helper/DateHelper#function-format-static).\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-displayDateFormat)\n     */\n    displayDateFormat ? : string\n    /**\n     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel)\n     * [strips collection](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,\n     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's\n     * body. Such widgets are called \"edge strips\".\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-dock)\n     */\n    dock ? : 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object\n    /**\n     * Decimal precision used when displaying durations, used by tooltips and DurationColumn.\n     * Specify `false` to use raw value\n     */\n    durationDisplayPrecision ? : number|Boolean\n    /**\n     * Text or HTML, or a [DomConfig](https://bryntum.com/products/schedulerpro/docs/api/Core/helper/DomHelper#typedef-DomConfig) block to display when there is no data to display in the grid\n     */\n    emptyText ? : string|DomConfig\n    /**\n     * Allow using [Delete] and [Backspace] to remove events/assignments\n     */\n    enableDeleteKey ? : Boolean\n    /**\n     * Set to `false` if you don't want event bar DOM updates to animate.\n     */\n    enableEventAnimations ? : Boolean\n    /**\n     * Enables showing occurrences of recurring events across the scheduler's time axis. If you want to disable\n     * the recurrence popup, you can choose set the `defaultAction` to `future` to affect all future\n     * occurrences, or `single` to just affect the currently selected event.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-enableRecurringEvents)\n     */\n    enableRecurringEvents ? : Boolean|{\n        defaultAction?: 'single'|'future'\n    }\n    /**\n     * Configure this as `true` to allow elements within cells to be styled as `position: sticky`.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-enableSticky)\n     */\n    enableSticky ? : Boolean\n    /**\n     * Set to `true` to allow text selection in the grid cells. Note, this cannot be used simultaneously with the\n     * `RowReorder` feature.\n     */\n    enableTextSelection ? : Boolean\n    /**\n     * When true, some features will start a project transaction, blocking the project queue, suspending\n     * store events and preventing UI from updates. It behaves similar to\n     * [instantUpdate](https://bryntum.com/products/schedulerpro/docs/api/Grid/column/Column#config-instantUpdate) set to `false`.\n     * Set `false` to not use project queue.\n     */\n    enableTransactionalFeatures ? : Boolean\n    /**\n     * Set to `true` to listen for CTRL-Z (CMD-Z on Mac OS) keyboard event and trigger undo (redo when SHIFT is\n     * pressed). Only applicable when using a [StateTrackingManager](https://bryntum.com/products/schedulerpro/docs/api/Core/data/stm/StateTrackingManager).\n     */\n    enableUndoRedoKeys ? : Boolean\n    /**\n     * The end date of the timeline (if not configure with [infiniteScroll](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineBase#config-infiniteScroll)).\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-endDate)\n     */\n    endDate ? : Date|string\n    /**\n     * The name of the end date parameter that will be passed to in every `eventStore` load request.\n     */\n    endParamName ? : string\n    /**\n     * Field from EventModel displayed as text in the bar when rendering\n     */\n    eventBarTextField ? : string\n    /**\n     * Event color used by default. Events and resources can specify their own color, with priority order being:\n     * Event -&gt; Resource -&gt; Scheduler default.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-eventColor)\n     */\n    eventColor ? : EventColor\n    /**\n     * Defines how to handle overlapping events. Valid values are:\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-eventLayout)\n     */\n    eventLayout ? : 'stack'|'pack'|'mixed'|'none'|{\n        type?: 'stack'|'pack'|'mixed'|'none'\n    }\n    /**\n     * An empty function by default, but provided so that you can override it. This function is called each time\n     * an event is rendered into the schedule to render the contents of the event. It's called with the event,\n     * its resource and a `renderData` object which allows you to populate data placeholders inside the event\n     * template. <strong>IMPORTANT</strong> You should never modify any data on the EventModel inside this method.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-eventRenderer)\n     * @param {object} detail An object containing the information needed to render an Event.\n     * @param {EventModel} detail.eventRecord The event record.\n     * @param {ResourceModel} detail.resourceRecord The resource record.\n     * @param {AssignmentModel} detail.assignmentRecord The assignment record.\n     * @param {Scheduler} detail.scheduler The Scheduler instance.\n     * @param {object} detail.renderData An object containing details about the event rendering.\n     * @param {EventModel} detail.renderData.event The event record.\n     * @param {DomClassList|string} detail.renderData.cls An object whose property names represent the CSS class names to be added to the event bar element. Set a property's value to truthy or falsy to add or remove the class name based on the property name. Using this technique, you do not have to know whether the class is already there, or deal with concatenation.\n     * @param {DomClassList|string} detail.renderData.wrapperCls An object whose property names represent the CSS class names to be added to the event wrapper element. Set a property's value to truthy or falsy to add or remove the class name based on the property name. Using this technique, you do not have to know whether the class is already there, or deal with concatenation.\n     * @param {DomClassList|string} detail.renderData.iconCls An object whose property names represent the CSS class names to be added to an event icon element. Note that an element carrying this icon class is injected into the event element *after* the renderer completes, *before* the renderer's created content. To disable this if the renderer takes full control and creates content using the iconCls, you can set `renderData.iconCls = null`.\n     * @param {number} detail.renderData.left Vertical offset position (in pixels) on the time axis.\n     * @param {number} detail.renderData.width Width in pixels of the event element.\n     * @param {number} detail.renderData.height Height in pixels of the event element.\n     * @param {string|<String, String>} detail.renderData.style Inline styles for the event bar DOM element. Use either 'border: 1px solid black' or `{ border: '1px solid black' }`\n     * @param {string|<String, String>} detail.renderData.wrapperStyle Inline styles for wrapper of the event bar DOM element. Use either 'border: 1px solid green' or `{ border: '1px solid green' }`\n     * @param {string} detail.renderData.eventStyle The `eventStyle` of the event. Use this to apply custom styles to the event DOM element\n     * @param {string} detail.renderData.eventColor The `eventColor` of the event. Use this to set a custom color for the rendered event\n     * @param {DomConfig>} detail.renderData.children An array of DOM configs used as children to the `b-sch-event` element. Can be populated with additional DOM configs to have more control over contents.\n     * @returns {string|DomConfig|DomConfig>} A simple string, or a DomConfig (or array thereof)\n     */\n    eventRenderer ? : (detail: { eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, assignmentRecord: SchedulerAssignmentModel, scheduler: Scheduler, renderData: { event: SchedulerEventModel, cls: DomClassList|string, wrapperCls: DomClassList|string, iconCls: DomClassList|string, left: number, width: number, height: number, style: string|Record<string, string>, wrapperStyle: string|Record<string, string>, eventStyle: string, eventColor: string, children: DomConfig[] } }) => string|DomConfig|DomConfig[]\n    /**\n     * `this` reference for the [eventRenderer](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-eventRenderer) function\n     */\n    eventRendererThisObj ? : object\n    /**\n     * Inline events, will be loaded into an internally created EventStore.\n     */\n    events ? : SchedulerEventModel[]|SchedulerEventModelConfig[]\n    /**\n     * Configure as `true`, or set property to `true` to disable event selection.\n     */\n    eventSelectionDisabled ? : Boolean\n    /**\n     * The [EventStore](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/data/EventStore) holding the events to be rendered into the scheduler (required).\n     */\n    eventStore ? : SchedulerEventStore|SchedulerEventStoreConfig\n    /**\n     * Event style used by default. Events and resources can specify their own style, with priority order being:\n     * Event -&gt; Resource -&gt; Scheduler default. Determines the appearance of the event by assigning a CSS class\n     * to it. Available styles are:\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-eventStyle)\n     */\n    eventStyle ? : 'plain'|'border'|'colored'|'hollow'|'line'|'dashed'|'minimal'|'rounded'|'calendar'|'interday'|null\n    extraData ? : any\n    /**\n     * Set to `true` to stretch the last column in a grid with all fixed width columns\n     * to fill extra available space if the grid's width is wider than the sum of all\n     * configured column widths.\n     */\n    fillLastColumn ? : Boolean\n    /**\n     * Specify `true` to force rendered events/tasks to fill entire ticks. This only affects rendering, start\n     * and end dates retain their value on the data level.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-fillTicks)\n     */\n    fillTicks ? : Boolean\n    /**\n     * Use fixed row height. Setting this to `true` will configure the underlying RowManager to use fixed row\n     * height, which sacrifices the ability to use rows with variable height to gain a fraction better\n     * performance.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-fixedRowHeight)\n     */\n    fixedRowHeight ? : Boolean\n    /**\n     * When this widget is a child of a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container), it will by default be participating in a\n     * flexbox layout. This config allows you to set this widget's\n     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.\n     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.\n     * numeric-only values are interpreted as the `flex-grow` value.\n     */\n    flex ? : number|string\n    /**\n     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,\n     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-strips).\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-footer)\n     */\n    footer ? : {\n        dock?: 'top'|'right'|'bottom'|'left'|'start'|'end'\n        html?: string\n        cls?: string\n    }|string\n    /**\n     * Set to `true` to force the time columns to fit to the available space (horizontal or vertical depends on mode).\n     * Note that setting [suppressFit](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineBase#config-suppressFit) to `true`, will disable `forceFit` functionality. Zooming\n     * cannot be used when `forceFit` is set.\n     */\n    forceFit ? : Boolean\n    /**\n     * Refresh entire row when a record changes (`true`) or, if possible, only the cells affected (`false`).\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-fullRowRefresh)\n     */\n    fullRowRefresh ? : Boolean\n    /**\n     * A method allowing you to define date boundaries that will constrain resize, create and drag drop\n     * operations. The method will be called with the Resource record, and the Event record.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-getDateConstraints)\n     * @param {ResourceModel} resourceRecord The resource record\n     * @param {EventModel} eventRecord The event record\n     * @returns {DateConstraint} Constraining `Object` containing `start` and `end` constraints. Omitting either will mean that end is not constrained. So you can prevent a resize or move from moving *before* a certain time while not constraining the end date.\n     */\n    getDateConstraints ? : (resourceRecord?: SchedulerResourceModel, eventRecord?: SchedulerEventModel) => DateConstraint\n    /**\n     * Scheduler overrides Grids default implementation of [getRowHeight](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/GridBase#config-getRowHeight) to\n     * pre-calculate row heights based on events in the rows.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-getRowHeight)\n     * @param {ResourceModel} getRowHeight.record Resource record to determine row height for\n     * @returns {number} Desired row height\n     */\n    getRowHeight ? : (getRowHeight: { record: SchedulerResourceModel }) => number\n    /**\n     * A config [object](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-header)\n     */\n    header ? : string|Boolean|PanelHeader\n    /**\n     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which\n     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases\n     * this config is convenient.\n     */\n    height ? : string|number\n    /**\n     * Configure with true to make widget initially hidden.\n     */\n    hidden ? : Boolean\n    /**\n     * Set to `true` to hide the footer elements\n     */\n    hideFooters ? : Boolean\n    /**\n     * Set to `true` to hide the column header elements\n     */\n    hideHeaders ? : Boolean\n    /**\n     * Set to `true` to hide the Grid's horizontal scrollbar(s)\n     */\n    hideHorizontalScrollbar ? : Boolean\n    /**\n     * By default the row hover effect is not visible in the Scheduler part of the grid.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-hideRowHover)\n     */\n    hideRowHover ? : Boolean\n    /**\n     * Configure as `true`, or set property to `true` to highlight dependent events as well when selecting an event.\n     */\n    highlightPredecessors ? : Boolean\n    /**\n     * Configure as `true`, or set property to `true` to highlight dependent events as well when selecting an event.\n     */\n    highlightSuccessors ? : Boolean\n    /**\n     * A CSS class to add to hovered row elements\n     */\n    hoverCls ? : string\n    /**\n     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById\n     */\n    id ? : string\n    /**\n     * Set to `true` to ignore reacting to DOM events (mouseover/mouseout etc) while scrolling. Useful if you\n     * want to maximize scroll performance.\n     */\n    ignoreDomEventsWhileScrolling ? : Boolean\n    /**\n     * Determines if the widgets read-only state should be controlled by its parent.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-ignoreParentReadOnly)\n     */\n    ignoreParentReadOnly ? : Boolean\n    /**\n     * Configure as `true` to automatically adjust the panel timespan during scrolling in the time dimension,\n     * when the scroller comes close to the start/end edges.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-infiniteScroll)\n     */\n    infiniteScroll ? : Boolean\n    /**\n     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.\n     */\n    insertBefore ? : HTMLElement|string\n    /**\n     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-appendTo) config is ignored.\n     */\n    insertFirst ? : HTMLElement|string\n    /**\n     * A template method (empty by default) allowing you to control if an event can be selected or not.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-isEventSelectable)\n     * @param {EventModel} event The event record\n     * @returns {boolean} true if event can be selected, otherwise false\n     */\n    isEventSelectable ? : (event: SchedulerEventModel) => Boolean\n    /**\n     * See [Keyboard shortcuts](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/Scheduler#keyboard-shortcuts) for details\n     */\n    keyMap ? : Record<string, string>\n    /**\n     * The listener set for this object.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-listeners)\n     */\n    listeners ? : TimelineListeners\n    /**\n     * A [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object, or a message to be shown when a store is performing a remote\n     * operation, or Crud Manager is loading data from the sever. Set to `null` to disable default load mask.\n     */\n    loadMask ? : string|MaskConfig|null\n    /**\n     * A [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object to adjust the [maskDefaults](#Core/widget/Widget#config-maskDefaults)\n     * when data is loading. The message and optional configuration from the\n     * [loadMask](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/LoadMaskable#config-loadMask) config take priority over these options, just as they do\n     * for `maskDefaults`, respectively.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-loadMaskDefaults)\n     */\n    loadMaskDefaults ? : MaskConfig\n    /**\n     * A [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object to adjust the [maskDefaults](#Core/widget/Widget#config-maskDefaults)\n     * when an error occurs loading data.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-loadMaskError)\n     */\n    loadMaskError ? : MaskConfig|Mask|Boolean\n    /**\n     * Set to `false` to disable localization of this object.\n     */\n    localizable ? : Boolean\n    /**\n     * Time in ms until a longpress is triggered\n     */\n    longPressTime ? : number\n    /**\n     * This flag controls whether Scheduler should preserve its selection of events when loading a new dataset\n     * (if selected event ids are included in the newly loaded dataset).\n     */\n    maintainSelectionOnDatasetChange ? : Boolean\n    /**\n     * When `true`, events are sized and positioned based on rowHeight, resourceMargin and barMargin settings.\n     * Set this to `false` if you want to control height and vertical position using CSS instead.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-managedEventSizing)\n     */\n    managedEventSizing ? : Boolean\n    /**\n     * Widget's margin. This may be configured as a single number or a `TRBL` format string.\n     * numeric-only values are interpreted as pixels.\n     */\n    margin ? : number|string\n    /**\n     * Grids change the `maskDefaults` to cover only their `body` element.\n     */\n    maskDefaults ? : MaskConfig\n    /**\n     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a\n     * [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object.\n     */\n    masked ? : Boolean|string|MaskConfig\n    /**\n     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that\n     * like [height](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.\n     */\n    maxHeight ? : string|number\n    /**\n     * The maximum time axis unit to display non-working ranges for ('hour' or 'day' etc).\n     * When zooming to a view with a larger unit, no non-working time elements will be rendered.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-maxTimeAxisUnit)\n     */\n    maxTimeAxisUnit ? : DurationUnit\n    /**\n     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that\n     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.\n     */\n    maxWidth ? : string|number\n    /**\n     * The maximum zoom level to which [zoomIn](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineZoomable#function-zoomIn) will work. Defaults to the number of\n     * [ViewPresets](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/preset/ViewPreset) available, see [presets](#Scheduler/view/mixin/TimelineViewPresets#property-presets)\n     * for information. Unless you have modified the collection of available presets, the max zoom level is\n     * milliseconds.\n     */\n    maxZoomLevel ? : number\n    /**\n     * How to align milestones in relation to their startDate. Only applies when using a `milestoneLayoutMode`\n     * other than `default`. Valid values are:\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-milestoneAlign)\n     */\n    milestoneAlign ? : 'start'|'center'|'end'\n    /**\n     * Factor representing the average char width in pixels used to determine milestone width when configured\n     * with `milestoneLayoutMode: 'estimate'`.\n     */\n    milestoneCharWidth ? : number\n    /**\n     * How to handle milestones during event layout. How the milestones are displayed when part of the layout\n     * are controlled using [milestoneTextPosition](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-milestoneTextPosition).\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-milestoneLayoutMode)\n     */\n    milestoneLayoutMode ? : 'default'|'estimate'|'data'|'measure'\n    /**\n     * Position of the milestone text:\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-milestoneTextPosition)\n     */\n    milestoneTextPosition ? : 'inside'|'outside'|'always-outside'\n    /**\n     * Grid's `min-height`. Defaults to `10em` to be sure that the Grid always has a height wherever it is\n     * inserted.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-minHeight)\n     */\n    minHeight ? : string|number\n    /**\n     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that\n     * like [width](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.\n     */\n    minWidth ? : string|number\n    /**\n     * The minimum zoom level to which [zoomOut](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineZoomable#function-zoomOut) will work. Defaults to 0 (year ticks)\n     */\n    minZoomLevel ? : number\n    /**\n     * Scheduler mode. Supported values: horizontal, vertical\n     */\n    mode ? : 'horizontal'|'vertical'\n    /**\n     * Grid monitors window resize by default.\n     */\n    monitorResize ? : Boolean\n    /**\n     * Configure as `true` to allow `CTRL+click` to select multiple events in the scheduler.\n     */\n    multiEventSelect ? : Boolean\n    /**\n     * When an event bar has a width less than this value, it gets the CSS class `b-sch-event-narrow`\n     * added. You may apply custom CSS rules using this class.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-narrowEventWidth)\n     */\n    narrowEventWidth ? : number\n    /**\n     * Override this method to provide a custom sort function to sort any overlapping events. This only applies\n     * to the horizontal mode, where the order the events are sorted in determines their vertical placement\n     * within a resource.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-overlappingEventSorter)\n     * @param {EventModel} a First event\n     * @param {EventModel} b Second event\n     * @returns {number} Return -1 to display `a` above `b`, 1 for `b` above `a`\n     */\n    overlappingEventSorter ? : (a: SchedulerEventModel, b: SchedulerEventModel) => number\n    /**\n     * The owning Widget of this Widget. If this Widget is directly contained (that is, it is one of the\n     * [items](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#property-items) of a Container), this config will be ignored. In this case\n     * the owner is <strong>always</strong> the encapsulating Container.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-owner)\n     */\n    owner ? : Widget\n    /**\n     * Partners this Timeline panel with another Timeline in order to sync their region sizes (sub-grids like locked, normal will get the same width),\n     * start and end dates, view preset, zoom level and scrolling position. All these values will be synced with the timeline defined as the `partner`.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-partner)\n     */\n    partner ? : TimelineBase\n    /**\n     * Set to `true` to include `startDate` and `endDate` params indicating the currently viewed date range in\n     * `EventStore` load requests (when loading using `AjaxStore` or `CrudManager` functionality).\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-passStartEndParameters)\n     */\n    passStartEndParameters ? : Boolean\n    /**\n     * Specify plugins (an array of classes) in config\n     */\n    plugins ? : Function[]\n    /**\n     * Maximum number of resources for which height is pre-calculated. If you have many events per\n     * resource you might want to lower this number to gain some initial rendering performance.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-preCalculateHeightLimit)\n     */\n    preCalculateHeightLimit ? : number\n    /**\n     * True to preserve focused cell after loading new data\n     */\n    preserveFocusOnDatasetChange ? : Boolean\n    /**\n     * Preserve the grid's vertical scroll position when changesets are applied, as in the case of remote\n     * changes, or when stores are configured with [syncDataOnLoad](https://bryntum.com/products/schedulerpro/docs/api/Core/data/Store#config-syncDataOnLoad).\n     */\n    preserveScroll ? : PreserveScrollOptions|Boolean\n    /**\n     * Specify `true` to preserve vertical scroll position after store actions that trigger a `refresh` event,\n     * such as loading new data and filtering.\n     */\n    preserveScrollOnDatasetChange ? : Boolean\n    /**\n     * An array of [ViewPreset](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/preset/ViewPreset) config objects\n     * which describes the available timeline layouts for this scheduler.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-presets)\n     */\n    presets ? : ViewPresetConfig[]\n    /**\n     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a\n     * menu on click etc, since the tooltip would be displayed at the same time.\n     */\n    preventTooltipOnTouch ? : Boolean\n    /**\n     * Project config object or a Project instance\n     */\n    project ? : ProjectModel|ProjectModelConfig|object\n    /**\n     * Unit used to set the length of the time axis when used as a component of a Calendar. Suitable units are\n     * `'month'`, `'week'` and `'day'`.\n     */\n    range ? : 'day'|'week'|'month'\n    /**\n     * Configure as `true` to make the scheduler read-only, by disabling any UIs for modifying data.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-readOnly)\n     */\n    readOnly ? : Boolean\n    relayStoreEvents ? : Boolean\n    /**\n     * Set to `false` to only measure cell contents when double-clicking the edge between column headers.\n     */\n    resizeToFitIncludesHeader ? : Boolean\n    /**\n     * A config object used to configure the resource columns in vertical mode.\n     * See [ResourceHeader](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/ResourceHeader) for more details on available properties.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-resourceColumns)\n     */\n    resourceColumns ? : ResourceHeaderConfig\n    /**\n     * Resource image extension, used when creating image path from resource name.\n     */\n    resourceImageExtension ? : string\n    /**\n     * Path to load resource images from. Used by the resource header in vertical mode and the\n     * [ResourceInfoColumn](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/column/ResourceInfoColumn) in horizontal mode. Set this to display miniature\n     * images for each resource using their `image` or `imageUrl` fields.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-resourceImagePath)\n     */\n    resourceImagePath ? : string\n    /**\n     * Control how much space to leave between the first event/last event and the resources edge (top/bottom\n     * margin within the resource row in horizontal mode, left/right margin within the resource column in\n     * vertical mode), in px. Defaults to the value of [barMargin](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/Scheduler#config-barMargin).\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-resourceMargin)\n     */\n    resourceMargin ? : number|ResourceMarginConfig\n    /**\n     * Inline resources, will be loaded into an internally created ResourceStore.\n     */\n    resources ? : SchedulerResourceModel[]|SchedulerResourceModelConfig[]\n    /**\n     * The [ResourceStore](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/data/ResourceStore) holding the resources to be rendered into the scheduler (required).\n     */\n    resourceStore ? : SchedulerResourceStore|SchedulerResourceStoreConfig\n    /**\n     * An empty function by default, but provided so that you can override it. This function is called each time\n     * a resource time range is rendered into the schedule. It's called with `resourceTimeRangeRecord`, `resourceRecord`,\n     * and `renderData` params.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-resourceTimeRangeRenderer)\n     * @param {object} detail An object containing the information needed to render a ResourceTimeRangeModel.\n     * @param {ResourceTimeRangeModel} detail.resourceTimeRangeRecord The resource time range record.\n     * @param {ResourceModel} detail.resourceRecord The resource record.\n     * @param {object} detail.renderData An object containing details about the event rendering.\n     * @returns {string|DomConfig|DomConfig>} A simple string, or a DomConfig object describing the markup\n     */\n    resourceTimeRangeRenderer ? : (detail: { resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, renderData: object }) => string|DomConfig|DomConfig[]\n    /**\n     * Inline resource time ranges, will be loaded into an internally created store if\n     * [ResourceTimeRanges](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/ResourceTimeRanges) is enabled.\n     */\n    resourceTimeRanges ? : ResourceTimeRangeModel[]|ResourceTimeRangeModelConfig[]\n    /**\n     * Resource time ranges store instance or config object for [ResourceTimeRanges](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/ResourceTimeRanges) feature.\n     */\n    resourceTimeRangeStore ? : ResourceTimeRangeStore|ResourceTimeRangeStoreConfig\n    /**\n     * \"Break points\" for which responsive config to use for columns and css.\n     */\n    responsiveLevels ? : Record<string, number|string>\n    /**\n     * Configure as `true` to have the component display a translucent ripple when its\n     * [focusElement](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the\n     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-ripple)\n     */\n    ripple ? : Boolean|{\n        delegate?: string\n        color?: string\n        radius?: number\n        clip?: string\n    }\n    /**\n     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot. If not inside a web component, set it to `document.body`\n     */\n    rootElement ? : ShadowRoot|HTMLElement\n    /**\n     * The height in pixels of Scheduler rows.\n     */\n    rowHeight ? : number\n    /**\n     * Set to `false` to not show row lines. End result might be overruled by/differ between themes.\n     */\n    rowLines ? : Boolean\n    /**\n     * Configures whether the grid is scrollable in the `Y` axis. This is used to configure a [Scroller](https://bryntum.com/products/schedulerpro/docs/api/Core/helper/util/Scroller).\n     * See the [scrollerClass](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/GridBase#config-scrollerClass) config option.\n     */\n    scrollable ? : Boolean|ScrollerConfig|Scroller\n    /**\n     * The class to instantiate to use as the [scrollable](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/GridBase#config-scrollable). Defaults to [Scroller](#Core/helper/util/Scroller).\n     */\n    scrollerClass ? : typeof Scroller\n    /**\n     * Specifies the maximum duration for extending the current [TimeSpan](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/TimeSpan) to allow for smooth\n     * scrolling to an event.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-scrollExtensionThreshold)\n     */\n    scrollExtensionThreshold ? : string|DurationConfig\n    /**\n     * Configuration values for the [ScrollManager](https://bryntum.com/products/schedulerpro/docs/api/Core/util/ScrollManager) class on initialization. Returns the\n     * [ScrollManager](https://bryntum.com/products/schedulerpro/docs/api/Core/util/ScrollManager) at runtime.\n     */\n    scrollManager ? : ScrollManagerConfig|ScrollManager\n    /**\n     * Selection configuration settings, change these properties to control how selection works and what can be\n     * selected.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-selectionMode)\n     */\n    selectionMode ? : GridSelectionMode\n    /**\n     * Set to `false` to not select the resource of the event when clicking an event bar.\n     */\n    selectResourceOnEventNavigate ? : Boolean\n    /**\n     * Set to `false` to not select the row/resource when clicking the empty area in a time axis cell.\n     */\n    selectResourceOnScheduleClick ? : Boolean\n    /**\n     * `false` to not show a tooltip while creating a dependency\n     */\n    showCreationTooltip ? : Boolean\n    /**\n     * Configure as `true` to have the grid show a red \"changed\" tag in cells who's\n     * field value has changed and not yet been committed.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-showDirty)\n     */\n    showDirty ? : Boolean|{\n        duringEdit?: Boolean\n    }\n    /**\n     * If set to `true` this will show a color field in the [EventEdit](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/EventEdit) editor and also a\n     * picker in the [EventMenu](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/EventMenu). Both enables the user to choose a color which will be\n     * applied to the event bar's background. See EventModel's\n     * [eventColor](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/mixin/EventModelMixin#field-eventColor) config.\n     * config.\n     */\n    showEventColorPickers ? : Boolean\n    /**\n     * Set to `true` to show the lag in the tooltip\n     */\n    showLagInTooltip ? : Boolean\n    /**\n     * Set to `false` to hide recurring fields in event editor, even if the\n     * [Recurring Events](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/RecurringEvents#config-enableRecurringEvents) is `true`\n     * and a recurring event is being edited.\n     */\n    showRecurringUI ? : Boolean\n    /**\n     * Set to `true` to show a tooltip when hovering a dependency line\n     */\n    showTooltip ? : Boolean\n    /**\n     * Set to `true` to snap to the current time resolution increment while interacting with scheduled events.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-snap)\n     */\n    snap ? : Boolean\n    /**\n     * Affects drag drop and resizing of events when [snap](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineDateMapper#config-snap)\n     * is enabled.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-snapRelativeToEventStartDate)\n     */\n    snapRelativeToEventStartDate ? : Boolean\n    /**\n     * The start date of the timeline (if not configure with [infiniteScroll](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineBase#config-infiniteScroll)).\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-startDate)\n     */\n    startDate ? : Date|string\n    /**\n     * The name of the start date parameter that will be passed to in every `eventStore` load request.\n     */\n    startParamName ? : string\n    /**\n     * This value can be one of the following:\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-stateful)\n     */\n    stateful ? : Boolean|object|string[]\n    /**\n     * The events that, when fired by this component, should trigger it to save its state by calling\n     * [saveState](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#function-saveState).\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-statefulEvents)\n     */\n    statefulEvents ? : object|string[]\n    /**\n     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#config-stateProvider). If this config is\n     * not assigned, and [stateful](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)\n     * (if explicitly specified) will be used as the `stateId`.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-stateId)\n     */\n    stateId ? : string\n    /**\n     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/schedulerpro/docs/api/Core/mixin/State#property-state). By default, `state`\n     * will be saved using the [default state provider](https://bryntum.com/products/schedulerpro/docs/api/Core/state/StateProvider#property-instance-static).\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-stateProvider)\n     */\n    stateProvider ? : StateProvider\n    /**\n     * Unit used to control how large steps to take when clicking the previous and next buttons in the Calendar\n     * UI. Only applies when used as a component of a Calendar.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-stepUnit)\n     */\n    stepUnit ? : DurationUnit\n    /**\n     * When set, the text in the major time axis header sticks in the scrolling viewport as long as possible.\n     */\n    stickyHeaders ? : Boolean\n    /**\n     * Store that holds records to display in the grid, or a store config object. If the configuration contains\n     * a `readUrl`, an `AjaxStore` will be created.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-store)\n     */\n    store ? : Store|StoreConfig|AjaxStore|AjaxStoreConfig\n    /**\n     * An object containing widgets keyed by name. By default (when no `type` is given), strips are\n     * [toolbars](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Toolbar). If you want to pass an array, you can use\n     * the toolbar's [items](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container#config-items).\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-strips)\n     */\n    strips ? : Record<string, ContainerItemConfig>\n    /**\n     * An object containing sub grid configuration objects keyed by a `region` property.\n     * By default, grid has a 'locked' region (if configured with locked columns) and a 'normal' region.\n     * The 'normal' region defaults to use `flex: 1`.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-subGridConfigs)\n     */\n    subGridConfigs ? : Record<string, SubGridConfig>\n    /**\n     * Set to `true` to prevent auto calculating of a minimal [tickSize](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineEventRendering#property-tickSize)\n     * to always fit the content to the screen size. Setting this property on `true` will disable [forceFit](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineBase#config-forceFit) behaviour.\n     */\n    suppressFit ? : Boolean\n    /**\n     * A [Mask](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Mask) config object, or a message to be shown when Crud Manager\n     * is persisting changes on the server. Set to `null` to disable default sync mask.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-syncMask)\n     */\n    syncMask ? : string|MaskConfig|null\n    /**\n     * A configuration for the [tab](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tab) created for this widget when it is placed in a\n     * [TabPanel](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for\n     * this widget:\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-tab)\n     */\n    tab ? : Boolean|TabConfig\n    /**\n     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Toolbar),\n     * or array of config objects representing the child items of a Toolbar.\n     * This creates a toolbar docked to the top of the panel immediately below the header.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-tbar)\n     */\n    tbar ? : (ContainerItemConfig|string)[]|ToolbarConfig|PagingToolbarConfig\n    /**\n     * CSS class used for terminals\n     */\n    terminalCls ? : string\n    /**\n     * Delay in ms before hiding the terminals when the mouse leaves an event bar or terminal.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-terminalHideDelay)\n     */\n    terminalHideDelay ? : number\n    /**\n     * Terminal offset from their initial position, in px. Positive values move terminals further away from the\n     * event bar, negative values inside the event bar.\n     */\n    terminalOffset ? : number\n    /**\n     * Delay in ms before showing the terminals when hovering over an event bar.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-terminalShowDelay)\n     */\n    terminalShowDelay ? : number\n    /**\n     * Where (on event bar edges) to display terminals. The sides are `'start'`, `'top'`,\n     * `'end'` and `'bottom'`\n     */\n    terminalSides ? : string[]\n    /**\n     * Terminal diameter in px, overrides the default CSS value for it (which might depend on theme).\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-terminalSize)\n     */\n    terminalSize ? : number|string\n    /**\n     * The width/height (depending on vertical / horizontal mode) of all the time columns.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-tickSize)\n     */\n    tickSize ? : number\n    /**\n     * A [TimeAxis](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/data/TimeAxis) config object or instance, used to create a backing data store of\n     * 'ticks' providing the input date data for the time axis of timeline panel. Created automatically if none\n     * supplied.\n     */\n    timeAxis ? : TimeAxisConfig|TimeAxis\n    /**\n     * Inline time ranges, will be loaded into an internally created store if [TimeRanges](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/TimeRanges)\n     * is enabled.\n     */\n    timeRanges ? : TimeSpan[]|TimeSpanConfig[]\n    /**\n     * The time ranges store instance for [TimeRanges](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/TimeRanges) feature.\n     */\n    timeRangeStore ? : Store|StoreConfig\n    /**\n     * A title to display in the header or owning TabPanel. Causes creation and docking of a header\n     * to the top if no header is configured.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-title)\n     */\n    title ? : string\n    /**\n     * The [tools](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each\n     * property name is the reference by which an instantiated tool may be retrieved from the live\n     * `[tools](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/mixin/Toolable#property-tools)` property.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-tools)\n     */\n    tools ? : Record<string, ToolConfig>\n    /**\n     * A template function allowing you to configure the contents of the tooltip shown when hovering a\n     * dependency line. You can return either an HTML string or a [DomConfig](https://bryntum.com/products/schedulerpro/docs/api/Core/helper/DomHelper#typedef-DomConfig) object.\n     * @param {DependencyBaseModel} dependency The dependency record\n     * @returns {string|DomConfig}\n     */\n    tooltipTemplate ? : (dependency: DependencyBaseModel) => string|DomConfig\n    /**\n     * Animation transition duration in milliseconds.\n     */\n    transitionDuration ? : number\n    /**\n     * Configure as `true` to trigger `selectionChange` when removing a selected event/assignment.\n     */\n    triggerSelectionChangeOnRemove ? : Boolean\n    type ? : 'timeline'\n    /**\n     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified\n     * as a space separated string, an array of strings, or as an object in which property names with truthy\n     * values are used as the class names.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-ui)\n     */\n    ui ? : 'plain'|'toolbar'|string|object\n    /**\n     * By default, scrolling the schedule will update the [timelineContext](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/SchedulerBase#property-timelineContext) to reflect the new\n     * currently hovered context. When displaying a large number of events on screen at the same time, this will\n     * have a slight impact on scrolling performance. In such scenarios, opt out of this behavior by setting\n     * this config to `false`.\n     */\n    updateTimelineContextOnScroll ? : Boolean\n    /**\n     * By default, the day of week and week of month of the event's start date are used to create\n     * helpful contextual recurrence types when editing a non-recurring event record and choosing\n     * an initial recurrence type.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-useContextualRecurrenceRules)\n     */\n    useContextualRecurrenceRules ? : Boolean\n    /**\n     * By default, scheduler fade events in on load. Specify `false` to prevent this animation or specify one\n     * of the available animation types to use it (`true` equals `'fade-in'`):\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-useInitialAnimation)\n     */\n    useInitialAnimation ? : Boolean|'fade-in'|'slide-from-left'|'slide-from-top'|string\n    /**\n     * The time axis column config for vertical [mode](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/SchedulerBase#config-mode).\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-verticalTimeAxisColumn)\n     */\n    verticalTimeAxisColumn ? : VerticalTimeAxisColumnConfig\n    /**\n     * A string key used to lookup a predefined [ViewPreset](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/preset/ViewPreset) (e.g. 'weekAndDay', 'hourAndDay'),\n     * managed by [PresetManager](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/preset/PresetManager). See [PresetManager](#Scheduler/preset/PresetManager) for more information.\n     * Or a config object for a viewPreset.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-viewPreset)\n     */\n    viewPreset ? : string|ViewPresetConfig\n    /**\n     * A date to bring into view initially on the scrollable timeline.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-visibleDate)\n     */\n    visibleDate ? : Date|VisibleDate\n    /**\n     * Integer number indicating the size of timespan during zooming. When zooming, the timespan is adjusted to make\n     * the scrolling area `visibleZoomFactor` times wider than the timeline area itself. Used in\n     * [zoomToSpan](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineZoomable#function-zoomToSpan) and [zoomToLevel](#Scheduler/view/mixin/TimelineZoomable#function-zoomToLevel) functions.\n     */\n    visibleZoomFactor ? : number\n    /**\n     * A valid JS day index between 0-6 (0: Sunday, 1: Monday etc.) to be considered the start day of the week.\n     * When omitted, the week start day is retrieved from the active locale class.\n     */\n    weekStartDay ? : number\n    /**\n     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Container).\n     * Higher weights go further down.\n     */\n    weight ? : number\n    /**\n     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which\n     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases\n     * this config is convenient.\n     */\n    width ? : string|number\n    /**\n     * An object with format `{ fromDay, toDay, fromHour, toHour }` that describes the working days and hours.\n     * This object will be used to populate TimeAxis [include](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/data/TimeAxis#config-include) property.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#config-workingTime)\n     */\n    workingTime ? : {\n        fromDay?: number\n        toDay?: number\n        fromHour?: number\n        toHour?: number\n    }\n    /**\n     * Whether the originally rendered timespan should be preserved while zooming. By default, it is set to `false`,\n     * meaning the timeline panel will adjust the currently rendered timespan to limit the amount of HTML content to\n     * render. When setting this option to `true`, be careful not to allow to zoom a big timespan in seconds\n     * resolution for example. That will cause <strong>a lot</strong> of HTML content to be rendered and affect performance. You\n     * can use [minZoomLevel](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineZoomable#config-minZoomLevel) and [maxZoomLevel](#Scheduler/view/mixin/TimelineZoomable#config-maxZoomLevel) config options for that.\n     */\n    zoomKeepsOriginalTimespan ? : Boolean\n    /**\n     * If true, you can zoom in and out on the time axis using CTRL-key + mouse wheel.\n     */\n    zoomOnMouseWheel ? : Boolean\n    /**\n     * True to zoom to time span when double-clicking a time axis cell.\n     */\n    zoomOnTimeAxisDoubleClick ? : Boolean\n\n    // Features\n    /**\n     * Allows using `[Ctrl/CMD + C]`, `[Ctrl/CMD + X]` and `[Ctrl/CMD + V]` to cut, copy and paste cell or cell ranges. Also\n     * makes cut, copy and paste actions available via the cell context menu.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/CellCopyPaste)\n     */\n    cellCopyPasteFeature ? : object|Boolean|string|CellCopyPaste|CellCopyPasteConfig\n    /**\n     * Adding this feature to the grid and other Bryntum products which are based on the Grid (i.e. Scheduler, SchedulerPro, and Gantt)\n     * enables cell editing. Any subclass of [Field](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field) can be used\n     * as editor for the [Column](https://bryntum.com/products/schedulerpro/docs/api/Grid/column/Column). The most popular are:\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/CellEdit)\n     */\n    cellEditFeature ? : object|Boolean|string|GridCellEdit|GridCellEditConfig\n    /**\n     * Right click to display context menu for cells.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/CellMenu)\n     */\n    cellMenuFeature ? : object|Boolean|string|CellMenu|CellMenuConfig\n    /**\n     * Displays a tooltip when hovering cells.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/CellTooltip)\n     */\n    cellTooltipFeature ? : object|Boolean|string|CellTooltip|CellTooltipConfig\n    /**\n     * Enables the [autoWidth](https://bryntum.com/products/schedulerpro/docs/api/Grid/column/Column#config-autoWidth) config for a grid's columns.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/ColumnAutoWidth)\n     */\n    columnAutoWidthFeature ? : object|Boolean|string|ColumnAutoWidth|ColumnAutoWidthConfig\n    /**\n     * Displays a toolbar while dragging column headers. Drop on a button in the toolbar to activate a certain function,\n     * for example to group by that column. This feature simplifies certain operations on touch devices.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/ColumnDragToolbar)\n     */\n    columnDragToolbarFeature ? : object|Boolean|string|ColumnDragToolbar|ColumnDragToolbarConfig\n    /**\n     * Displays column lines for ticks, with a different styling for major ticks (by default they are darker). If this\n     * feature is disabled, no lines are shown. If it's enabled, line are shown for the tick level which is set in current\n     * ViewPreset. Please see [columnLinesFor](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/preset/ViewPreset#field-columnLinesFor) config for details.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/ColumnLines)\n     */\n    columnLinesFeature ? : object|Boolean|string|ColumnLines|ColumnLinesConfig\n    /**\n     * Displays a column picker (to show/hide columns) in the header context menu. Columns can be displayed in sub menus\n     * by region or tag. Grouped headers are displayed as menu hierarchies.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/ColumnPicker)\n     */\n    columnPickerFeature ? : object|Boolean|string|ColumnPicker|ColumnPickerConfig\n    /**\n     * Allows user to rename columns by either right-clicking column header or using keyboard shortcuts when column header\n     * is focused.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/ColumnRename)\n     */\n    columnRenameFeature ? : object|Boolean|string|ColumnRename|ColumnRenameConfig\n    /**\n     * Allows user to reorder columns by dragging headers. To get notified about column reorder listen to `change` event\n     * on [columns](https://bryntum.com/products/schedulerpro/docs/api/Grid/data/ColumnStore) store.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/ColumnReorder)\n     */\n    columnReorderFeature ? : object|Boolean|string|ColumnReorder|ColumnReorderConfig\n    /**\n     * Enables user to resize columns by dragging a handle on the right hand side of the header. To get notified about column\n     * resize listen to `change` event on [columns](https://bryntum.com/products/schedulerpro/docs/api/Grid/data/ColumnStore) store.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/ColumnResize)\n     */\n    columnResizeFeature ? : object|Boolean|string|ColumnResize|ColumnResizeConfig\n    /**\n     * Feature that draws dependencies between events. Uses a [DependencyStore](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/data/DependencyStore) to determine which\n     * dependencies to draw, if none is defined one will be created automatically. Dependencies can also be specified as\n     * `scheduler.dependencies`, see example below:\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/Dependencies)\n     */\n    dependenciesFeature ? : object|Boolean|string|SchedulerDependencies|SchedulerDependenciesConfig\n    /**\n     * Feature that displays a popup containing fields for editing a dependency. Requires the\n     * [Dependencies](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/Dependencies) feature to be enabled. Double-click a dependency line in the demo below to\n     * show the editor.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/DependencyEdit)\n     */\n    dependencyEditFeature ? : object|Boolean|string|SchedulerDependencyEdit|SchedulerDependencyEditConfig\n    /**\n     * Allow using [Ctrl/CMD + C/X] and [Ctrl/CMD + V] to copy/cut and paste events.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/EventCopyPaste)\n     */\n    eventCopyPasteFeature ? : object|Boolean|string|EventCopyPaste|EventCopyPasteConfig\n    /**\n     * Allows user to drag and drop events within the scheduler, to change `startDate` or resource assignment.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/EventDrag)\n     */\n    eventDragFeature ? : object|Boolean|string|EventDrag|EventDragConfig\n    /**\n     * Feature that allows the user to create new events by dragging in empty parts of the scheduler rows.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/EventDragCreate)\n     */\n    eventDragCreateFeature ? : object|Boolean|string|EventDragCreate|EventDragCreateConfig\n    /**\n     * Enables users to click and drag to select events (or assignments in multi assignment mode) inside the Scheduler's\n     * timeline. Press CTRL/CMD-key to extend an existing selection.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/EventDragSelect)\n     */\n    eventDragSelectFeature ? : object|Boolean|string|EventDragSelect|EventDragSelectConfig\n    /**\n     * Feature that displays a popup containing widgets for editing event data.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/EventEdit)\n     */\n    eventEditFeature ? : object|Boolean|string|EventEdit|EventEditConfig\n    /**\n     * Adds event filter menu items to the timeline header context menu.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/EventFilter)\n     */\n    eventFilterFeature ? : object|Boolean|string|EventFilter|EventFilterConfig\n    /**\n     * Displays a context menu for events. Items are populated by other features and/or application code.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/EventMenu)\n     */\n    eventMenuFeature ? : object|Boolean|string|EventMenu|EventMenuConfig\n    /**\n     * Feature that allows rendering non-working time ranges into event bars (weekends for Scheduler, effective calendar for\n     * SchedulerPro):\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/EventNonWorkingTime)\n     */\n    eventNonWorkingTimeFeature ? : object|Boolean|string|EventNonWorkingTime|EventNonWorkingTimeConfig\n    /**\n     * Feature that allows resizing an event by dragging its end.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/EventResize)\n     */\n    eventResizeFeature ? : object|Boolean|string|SchedulerEventResize|SchedulerEventResizeConfig\n    /**\n     * Displays a tooltip when hovering events. The template used to render the tooltip can be customized, see [template](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/EventTooltip#config-template).\n     * Config options are also applied to the tooltip shown, see [Tooltip](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Tooltip) for available options.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/EventTooltip)\n     */\n    eventTooltipFeature ? : object|Boolean|string|EventTooltip|EventTooltipConfig\n    /**\n     * <strong>NOTE</strong>: This class requires a 3rd party library to operate.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/experimental/ExcelExporter)\n     */\n    excelExporterFeature ? : object|Boolean|string|ExcelExporter|ExcelExporterConfig\n    /**\n     * An experimental feature that lets users drop files on a Widget. The widget fires an event when a file is dropped onto it.\n     * In the event, you get access to the raw files as strings, that were parsed by calling `readAsBinaryString`.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/experimental/FileDrop)\n     */\n    fileDropFeature ? : object|Boolean|string|FileDrop|FileDropConfig\n    /**\n     * This feature adds a fill handle to a Grid range selection, which when dragged, fills the cells being dragged over\n     * with values based on the values in the original selected range. This is similar to functionality normally seen in\n     * various spreadsheet applications.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/FillHandle)\n     */\n    fillHandleFeature ? : object|Boolean|string|FillHandle|FillHandleConfig\n    /**\n     * Feature that allows filtering of the grid by settings filters on columns. The actual filtering is done by the store.\n     * For info on programmatically handling filters, see [StoreFilter](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/StoreFilter).\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/Filter)\n     */\n    filterFeature ? : object|Boolean|string|Filter|FilterConfig\n    /**\n     * Feature that allows filtering of the grid by entering filters on column headers.\n     * The actual filtering is done by the store.\n     * For info on programmatically handling filters, see [StoreFilter](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/StoreFilter).\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/FilterBar)\n     */\n    filterBarFeature ? : object|Boolean|string|FilterBar|FilterBarConfig\n    /**\n     * Enables rendering and handling of row groups. The actual grouping is done in the store, but triggered by `[shift]` +\n     * clicking headers or by using two finger tap (one on header, one anywhere on grid). Use `[shift]` + `[alt]` + click to\n     * remove a column grouper.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/Group)\n     */\n    groupFeature ? : object|Boolean|string|Group|GroupConfig\n    /**\n     * A special version of the Grid GroupSummary feature that enables summaries within scheduler. To use a single summary\n     * it is easiest to configure [renderer](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/GroupSummary#config-renderer), for multiple summaries see [summaries](#Scheduler/feature/GroupSummary#config-summaries).\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/GroupSummary)\n     */\n    groupSummaryFeature ? : object|Boolean|string|GroupSummary|GroupSummaryConfig\n    /**\n     * Right click column header or focus it and press SPACE key to show the context menu for headers.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/HeaderMenu)\n     */\n    headerMenuFeature ? : object|Boolean|string|HeaderMenu|HeaderMenuConfig\n    /**\n     * Enables users to click and drag to zoom to a date range in Scheduler's header time axis. Only supported in horizontal\n     * mode.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/HeaderZoom)\n     */\n    headerZoomFeature ? : object|Boolean|string|HeaderZoom|HeaderZoomConfig\n    /**\n     * Displays labels at positions [top](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/Labels#config-top), [right](#Scheduler/feature/Labels#config-right), [bottom](#Scheduler/feature/Labels#config-bottom) and\n     * [left](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/Labels#config-left).\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/Labels)\n     */\n    labelsFeature ? : object|Boolean|string|Labels|LabelsConfig\n    /**\n     * This feature allows resources which satisfy a certain condition to be locked at the top of the scheduler.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/LockRows)\n     */\n    lockRowsFeature ? : object|Boolean|string|LockRows|LockRowsConfig\n    /**\n     * This feature merges cells that have the same value in sorted (or [optionally](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/MergeCells#config-sortedOnly) any) columns\n     * configured to [mergeCells](https://bryntum.com/products/schedulerpro/docs/api/Grid/column/Column#config-mergeCells).\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/MergeCells)\n     */\n    mergeCellsFeature ? : object|Boolean|string|MergeCells|MergeCellsConfig\n    /**\n     * Feature that allows styling of weekends (and other non-working time) by adding timeRanges for those days.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/NonWorkingTime)\n     */\n    nonWorkingTimeFeature ? : object|Boolean|string|NonWorkingTime|NonWorkingTimeConfig\n    /**\n     * Makes the scheduler's timeline pannable by dragging with the mouse. Try it out in the demo below.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/Pan)\n     */\n    panFeature ? : object|Boolean|string|Pan|PanConfig\n    /**\n     * Generates PDF/PNG files from the Scheduler component.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/export/PdfExport)\n     */\n    pdfExportFeature ? : object|Boolean|string|PdfExport|PdfExportConfig\n    /**\n     * Allows printing Scheduler contents using browser print dialog.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/export/Print)\n     */\n    printFeature ? : object|Boolean|string|Print|PrintConfig\n    /**\n     * Feature that allows the user to search in a column by focusing a cell and typing. Navigate between hits using the\n     * keyboard, [f3] or [ctrl]/[cmd] + [g] moves to next, also pressing [shift] moves to previous.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/QuickFind)\n     */\n    quickFindFeature ? : object|Boolean|string|QuickFind|QuickFindConfig\n    /**\n     * Makes the splitter between grid [sections](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/SubGrid) draggable, to let users resize, and\n     * collapse/expand the sections.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/RegionResize)\n     */\n    regionResizeFeature ? : object|Boolean|string|RegionResize|RegionResizeConfig\n    /**\n     * Applicable only for Scheduler in `vertical` mode. Right click resource header cells to display a context menu.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/ResourceMenu)\n     */\n    resourceMenuFeature ? : object|Boolean|string|ResourceMenu|ResourceMenuConfig\n    /**\n     * Feature that draws resource time ranges, shaded areas displayed behind events. These zones are similar to events in\n     * that they have a start and end date but different in that they do not take part in the event layout, and they always\n     * occupy full row height.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/ResourceTimeRanges)\n     */\n    resourceTimeRangesFeature ? : object|Boolean|string|ResourceTimeRanges|ResourceTimeRangesConfig\n    /**\n     * Allow using [Ctrl/CMD + C/X] and [Ctrl/CMD + V] to copy/cut-and-paste rows. Also makes cut, copy and paste actions\n     * available via the cell context menu.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/RowCopyPaste)\n     */\n    rowCopyPasteFeature ? : object|Boolean|string|RowCopyPaste|RowCopyPasteConfig\n    /**\n     * Enables expanding of Grid rows by either row click or double click, or by adding a separate Grid column which renders\n     * a button that expands or collapses the row.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/RowExpander)\n     */\n    rowExpanderFeature ? : object|Boolean|string|RowExpander|RowExpanderConfig\n    /**\n     * This feature implements support for project transactions and used by default in Gantt. For general RowReorder feature\n     * documentation see [RowReorder](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/RowReorder).\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/RowReorder)\n     */\n    rowReorderFeature ? : object|Boolean|string|RowReorder|RowReorderConfig\n    /**\n     * Enables user to change row height by dragging the bottom row border. After a resize operation, the [rowHeight](https://bryntum.com/products/schedulerpro/docs/api/Grid/data/GridRowModel#field-rowHeight)\n     * field of the record is updated (when [applyToAllRows](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/RowResize#config-applyToAllRows) is `false`) and the [eventLayout](#Scheduler/model/ResourceModel#field-eventLayout) of the dragged resource\n     * row will be switched to `pack` as a result (only applies when `stack` is used by default).\n     * `barMargin` and `resourceMargin` will also be shrunk as you reduce the height of a row.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/RowResize)\n     */\n    rowResizeFeature ? : object|Boolean|string|RowResize|RowResizeConfig\n    /**\n     * Allow visually selecting a schedule \"cell\" by clicking, or [any other pointer gesture](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/ScheduleContext#config-triggerEvent).\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/ScheduleContext)\n     */\n    scheduleContextFeature ? : object|Boolean|string|ScheduleContext|ScheduleContextConfig\n    /**\n     * Displays a context menu for empty parts of the schedule. Items are populated in the first place\n     * by configurations of this Feature, then by other features and/or application code.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/ScheduleMenu)\n     */\n    scheduleMenuFeature ? : object|Boolean|string|ScheduleMenu|ScheduleMenuConfig\n    /**\n     * Feature that displays a tooltip containing the time at the mouse position when hovering empty parts of the schedule.\n     * To hide the schedule tooltip, just disable this feature:\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/ScheduleTooltip)\n     */\n    scheduleTooltipFeature ? : object|Boolean|string|ScheduleTooltip|ScheduleTooltipConfig\n    /**\n     * This feature injects buttons to the beginning and end of each row that will scroll to the next or previous event\n     * outside the current view. It can optionally show a label along with the button, using the\n     * [labelRenderer](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/ScrollButtons#config-labelRenderer). Only supported in horizontal [mode](#Scheduler/view/SchedulerBase#config-mode)\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/ScrollButtons)\n     */\n    scrollButtonsFeature ? : object|Boolean|string|ScrollButtons|ScrollButtonsConfig\n    /**\n     * <div class=\"external-example \" data-file=\"Grid/feature/Search.js\"></div>\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/Search)\n     */\n    searchFeature ? : object|Boolean|string|Search|SearchConfig\n    /**\n     * Feature that displays a text field to edit the event name. You can control the flow of this by listening to the events relayed by this class from the underlying [Editor](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Editor).\n     * To use this feature, you also need to disable the built-in default editing feature:\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/SimpleEventEdit)\n     */\n    simpleEventEditFeature ? : object|Boolean|string|SimpleEventEdit|SimpleEventEditConfig\n    /**\n     * Allows sorting of grid by clicking (or tapping) headers, also displays which columns grid is sorted by (numbered if\n     * using multisort). Use modifier keys for multisorting: [Ctrl/CMD + click] to add sorter, [Ctrl/CMD + Alt + click] to remove sorter.\n     * The actual sorting is done by the store, see [Store.sort()](https://bryntum.com/products/schedulerpro/docs/api/Core/data/mixin/StoreSort#function-sort).\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/Sort)\n     */\n    sortFeature ? : object|Boolean|string|Sort|SortConfig\n    /**\n     * This feature allows splitting the Scheduler into multiple views, either by using the cell context menu, or\n     * programmatically by calling [split()](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/Split#function-split).\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/Split)\n     */\n    splitFeature ? : object|Boolean|string|Split|SplitConfig\n    /**\n     * A feature which pins configurable content from a grid row to the top of the grid\n     * while the row scrolls off the top but is still visible.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/StickyCells)\n     */\n    stickyCellsFeature ? : object|Boolean|string|StickyCells|StickyCellsConfig\n    /**\n     * This feature applies native `position: sticky` to event contents in horizontal mode, keeping the contents in view as\n     * long as possible on scroll. For vertical mode it uses a programmatic solution to achieve the same result.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/StickyEvents)\n     */\n    stickyEventsFeature ? : object|Boolean|string|StickyEvents|StickyEventsConfig\n    /**\n     * Stripes rows by adding alternating CSS classes to all row elements (`b-even` and `b-odd`).\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/Stripe)\n     */\n    stripeFeature ? : object|Boolean|string|Stripe|StripeConfig\n    /**\n     * A special version of the Grid Summary feature. This feature displays a summary row in the grid footer.\n     * For regular columns in the locked section - specify type of summary on columns, available types are:\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/Summary)\n     */\n    summaryFeature ? : object|Boolean|string|Summary|SummaryConfig\n    /**\n     * Adds scheduler specific menu items to the timeline header context menu.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/TimeAxisHeaderMenu)\n     */\n    timeAxisHeaderMenuFeature ? : object|Boolean|string|TimeAxisHeaderMenu|TimeAxisHeaderMenuConfig\n    /**\n     * Feature that renders global ranges of time in the timeline. Use this feature to visualize a `range` like a 1 hr lunch\n     * or some important point in time (a `line`, i.e. a range with 0 duration). This feature can also show a current time\n     * indicator if you set [showCurrentTimeLine](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/TimeRanges#config-showCurrentTimeLine) to true. To style the rendered elements, use the\n     * [cls](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/TimeSpan#field-cls) field of the `TimeSpan` class.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/TimeRanges)\n     */\n    timeRangesFeature ? : object|Boolean|string|TimeRanges|TimeRangesConfig\n    /**\n     * Feature that allows selection of a time span in the time axis header. When a time span is selected in the header,\n     * a [timeSelectionChange](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/TimeSelection#event-timeSelectionChange) event is fired.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/TimeSelection)\n     */\n    timeSelectionFeature ? : object|Boolean|string|TimeSelection|TimeSelectionConfig\n    /**\n     * Feature that makes the grid work more like a tree. Included by default in [TreeGrid](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/TreeGrid). Requires\n     * exactly one [TreeColumn](https://bryntum.com/products/schedulerpro/docs/api/Grid/column/TreeColumn) among grids columns. That column will have its renderer replaced with a\n     * tree renderer that adds padding and icon to give the appearance of a tree. The original renderer is preserved and\n     * also called.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/Tree)\n     */\n    treeFeature ? : object|Boolean|string|Tree|TreeConfig\n    /**\n     * A feature that allows transforming a flat dataset (or the leaves of a hierarchical) into a tree by specifying a\n     * record field per parent level. Parents are generated based on each leaf's value for those fields.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/TreeGroup)\n     */\n    treeGroupFeature ? : object|Boolean|string|TreeGroup|TreeGroupConfig\n\n}>();\n\nconst emit = defineEmits<{\n    /**\n     * Fired on the owning Scheduler/Gantt after a dependency drag creation operation finished, no matter to outcome\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {TimeSpan} params.event.source The source task\n     * @param {TimeSpan} params.event.target The target task\n     * @param {DependencyBaseModel} params.event.dependency The created dependency\n     */\n    (e: 'afterDependencyCreateDrop', params: ((event: { source: TimeSpan, target: TimeSpan, dependency: DependencyBaseModel }) => void)|string): void\n    /**\n     * Fires on the owning Scheduler or Gantt widget after a dependency is successfully saved using the\n     * dependency edit popup\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source The scheduler instance or Gantt instance\n     * @param {SchedulerDependencyModel} params.event.dependencyRecord The dependency about to be saved\n     */\n    (e: 'afterDependencySave', params: ((event: { source: Scheduler, dependencyRecord: SchedulerDependencyModel }) => void)|string): void\n    /**\n     * Fires on the owning Scheduler at the end of the drag create gesture whether or not\n     * a new event was created by the gesture.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source\n     * @param {SchedulerEventModel} params.event.eventRecord The event record being created\n     * @param {SchedulerResourceModel} params.event.resourceRecord The resource record\n     * @param {HTMLElement} params.event.eventElement The element representing the created event record\n     */\n    (e: 'afterDragCreate', params: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, eventElement: HTMLElement }) => void)|string): void\n    /**\n     * Fired on the owning Scheduler after event drop\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source\n     * @param {SchedulerAssignmentModel[]} params.event.assignmentRecords\n     * @param {SchedulerEventModel[]} params.event.eventRecords\n     * @param {boolean} params.event.valid\n     * @param {object} params.event.context\n     * @param {MouseEvent} params.event.domEvent Browser event\n     */\n    (e: 'afterEventDrop', params: ((event: { source: Scheduler, assignmentRecords: SchedulerAssignmentModel[], eventRecords: SchedulerEventModel[], valid: boolean, context: object, domEvent: MouseEvent }) => void)|string): void\n    /**\n     * Fires on the owning Scheduler after editor is closed by any action - save, delete or cancel\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source The scheduler\n     */\n    (e: 'afterEventEdit', params: ((event: { source: Scheduler }) => void)|string): void\n    /**\n     * Fires on the owning Scheduler after an event is successfully saved\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source The scheduler instance\n     * @param {SchedulerEventModel} params.event.eventRecord The record about to be saved\n     */\n    (e: 'afterEventSave', params: ((event: { source: Scheduler, eventRecord: SchedulerEventModel }) => void)|string): void\n    /**\n     * Fired any time there is a change to the assignments selected in the Scheduler.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {'select'|'deselect'|'update'|'clear'} params.event.action One of the actions 'select', 'deselect', 'update', 'clear'\n     * @param {SchedulerAssignmentModel[]} params.event.selected An array of the Assignments added to the selection.\n     * @param {SchedulerAssignmentModel[]} params.event.deselected An array of the Assignments removed from the selection.\n     * @param {SchedulerAssignmentModel[]} params.event.selection The new selection.\n     */\n    (e: 'assignmentSelectionChange', params: ((event: { action: 'select'|'deselect'|'update'|'clear', selected: SchedulerAssignmentModel[], deselected: SchedulerAssignmentModel[], selection: SchedulerAssignmentModel[] }) => void)|string): void\n    /**\n     * Fires before an assignment is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or\n     * by the event editor. Can for example be used to display a custom dialog to confirm deletion, in which\n     * case records should be \"manually\" removed after confirmation:\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-beforeAssignmentDelete)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source The Scheduler instance\n     * @param {SchedulerEventModel[]} params.event.eventRecords The records about to be deleted\n     * @param {object} params.event.context Additional removal context:\n     * @param {Function} params.event.context.finalize Function to call to finalize the removal. Used to asynchronously decide to remove the records or not. Provide `false` to the function to prevent the removal.\n     * @param {boolean} params.event.context.finalize.removeRecords Provide `false` to the function to prevent the removal.\n     */\n    (e: 'beforeAssignmentDelete', params: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], context: { finalize: { removeRecords?: boolean } } }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * Fired any time there is going to be a change to the assignments selected in the Scheduler.\n     * Returning `false` prevents the change\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {string} params.event.action One of the actions 'select', 'deselect', 'update', 'clear'\n     * @param {SchedulerEventModel[]} params.event.selected An array of assignments that will be added to the selection.\n     * @param {SchedulerEventModel[]} params.event.deselected An array of assignments that will be removed from the selection.\n     * @param {SchedulerEventModel[]} params.event.selection The currently selected assignments, before applying `selected` and `deselected`.\n     */\n    (e: 'beforeAssignmentSelectionChange', params: ((event: { action: string, selected: SchedulerEventModel[], deselected: SchedulerEventModel[], selection: SchedulerEventModel[] }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * Fires on the owning Grid before the cell editing is canceled, return `false` to prevent cancellation.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source Owner grid\n     * @param {GridLocation} params.event.editorContext Editing context\n     */\n    (e: 'beforeCancelCellEdit', params: ((event: { source: Grid, editorContext: GridLocation }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * Fires on the owning Grid before deleting a range of selected cell values by pressing `Backspace` or `Del`\n     * buttons while [autoEdit](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/CellEdit#config-autoEdit) is set to `true`. Return `false` to prevent editing.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source Owner grid\n     * @param {(GridLocation|Model)[]} params.event.gridSelection An array of cell selectors or records that will have their values deleted (the records themself will not get deleted, only visible column values).\n     */\n    (e: 'beforeCellDelete', params: ((event: { source: Grid, gridSelection: (GridLocation|Model)[] }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * Fires on the owning Grid before editing starts, return `false` to prevent editing\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source Owner grid\n     * @param {GridLocation} params.event.editorContext Editing context\n     * @param {Column} params.event.editorContext.column Target column\n     * @param {Model} params.event.editorContext.record Target record\n     * @param {HTMLElement} params.event.editorContext.cell Target cell\n     * @param {Field} params.event.editorContext.editor The input field that the column is configured with (see [field](https://bryntum.com/products/schedulerpro/docs/api/Grid/column/Column#config-field)). This property mey be replaced to be a different [field](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Field) in the handler, to take effect just for the impending edit.\n     * @param {Function} params.event.editorContext.finalize An async function may be injected into this property which performs asynchronous finalization tasks such as complex validation of confirmation. The value `true` or `false` must be returned.\n     * @param {object} params.event.editorContext.finalize.context An object describing the editing context upon requested completion of the edit.\n     * @param {any} params.event.editorContext.value Cell value\n     */\n    (e: 'beforeCellEditStart', params: ((event: { source: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Field, finalize: { context?: object }, value: any } }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * This event is fired prior to starting a column drag gesture. The drag is canceled if a listener returns `false`.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source The grid instance.\n     * @param {Column} params.event.column The dragged column.\n     * @param {Event} params.event.event The browser event.\n     */\n    (e: 'beforeColumnDragStart', params: ((event: { source: Grid, column: Column, event: Event }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * This event is fired when a column is dropped, and you can return false from a listener to abort the operation.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source The grid instance.\n     * @param {Column} params.event.column The dragged column.\n     * @param {Column} params.event.insertBefore The column before which the dragged column will be inserted.\n     * @param {Column} params.event.newParent The new parent column.\n     * @param {Event} params.event.event The browser event.\n     * @param {string} params.event.region The region where the column was dropped.\n     */\n    (e: 'beforeColumnDropFinalize', params: ((event: { source: Grid, column: Column, insertBefore: Column, newParent: Column, event: Event, region: string }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * This event is fired prior to starting a column resize gesture. The resize is canceled if a listener returns\n     * `false`.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source The grid instance\n     * @param {Column} params.event.column The column\n     * @param {Event} params.event.domEvent The browser event\n     */\n    (e: 'beforeColumnResize', params: ((event: { source: Grid, column: Column, domEvent: Event }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * Fires on the owning Grid before a copy action is performed, return `false` to prevent the action\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source Owner grid\n     * @param {GridLocation[]} params.event.cells The cells about to be copied or cut\n     * @param {string} params.event.data The string data about to be copied or cut\n     * @param {boolean} params.event.isCut `true` if this is a cut action\n     * @param {string} params.event.entityName 'cell' to distinguish this event from other beforeCopy events\n     */\n    (e: 'beforeCopy', params: ((event: { source: Grid, cells: GridLocation[], data: string, isCut: boolean, entityName: string }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * Fires on the owning Grid before CSV export starts. Return `false` to cancel the export.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {ExportConfig} params.event.config Export config\n     * @param {Column[]} params.event.columns An array of columns to export\n     * @param {Model[]} params.event.rows An array of records to export\n     * @param {string} params.event.lineDelimiter The CSV delimiter to separate lines\n     * @param {string} params.event.columnDelimiter The CSV delimiter to separate values on one line\n     */\n    (e: 'beforeCSVExport', params: ((event: { config: ExportConfig, columns: Column[], rows: Model[], lineDelimiter: string, columnDelimiter: string }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * Fires on the owning Scheduler or Gantt widget before a dependency is added from the dependency\n     * edit popup\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source The scheduler or Gantt instance\n     * @param {SchedulerDependencyEdit} params.event.dependencyEdit The dependency edit feature\n     * @param {SchedulerDependencyModel} params.event.dependencyRecord The dependency about to be added\n     */\n    (e: 'beforeDependencyAdd', params: ((event: { source: Scheduler, dependencyEdit: SchedulerDependencyEdit, dependencyRecord: SchedulerDependencyModel }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * Fired on the owning Scheduler/Gantt before a dependency creation drag operation starts. Return `false` to\n     * prevent it\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {TimeSpan} params.event.source The source task\n     */\n    (e: 'beforeDependencyCreateDrag', params: ((event: { source: TimeSpan }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * Fired on the owning Scheduler/Gantt when a dependency drag creation operation is about to finalize\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {TimeSpan} params.event.source The source task\n     * @param {TimeSpan} params.event.target The target task\n     * @param {'start'|'end'|'top'|'bottom'} params.event.fromSide The from side (start / end / top / bottom)\n     * @param {'start'|'end'|'top'|'bottom'} params.event.toSide The to side (start / end / top / bottom)\n     */\n    (e: 'beforeDependencyCreateFinalize', params: ((event: { source: TimeSpan, target: TimeSpan, fromSide: 'start'|'end'|'top'|'bottom', toSide: 'start'|'end'|'top'|'bottom' }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * Fires on the owning Scheduler or Gantt widget before a dependency is deleted from the dependency\n     * edit popup\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source The scheduler instance\n     * @param {SchedulerDependencyModel} params.event.dependencyRecord The dependency record about to be deleted\n     */\n    (e: 'beforeDependencyDelete', params: ((event: { source: Scheduler, dependencyRecord: SchedulerDependencyModel }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * Fires on the owning Scheduler or Gantt widget before an dependency is displayed in the editor.\n     * This may be listened for to allow an application to take over dependency editing duties. Return `false` to\n     * stop the default editing UI from being shown or a `Promise` yielding `true` or `false` for async vetoing.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source The scheduler or Gantt instance\n     * @param {SchedulerDependencyEdit} params.event.dependencyEdit The dependencyEdit feature\n     * @param {SchedulerDependencyModel} params.event.dependencyRecord The record about to be shown in the editor.\n     */\n    (e: 'beforeDependencyEdit', params: ((event: { source: Scheduler, dependencyEdit: SchedulerDependencyEdit, dependencyRecord: SchedulerDependencyModel }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * Fires on the owning Scheduler or Gantt widget when the editor for a dependency is available, but before it is shown. Allows\n     * manipulating fields before the widget is shown.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source The scheduler or Gantt instance\n     * @param {SchedulerDependencyEdit} params.event.dependencyEdit The dependencyEdit feature\n     * @param {SchedulerDependencyModel} params.event.dependencyRecord The record about to be shown in the editor.\n     * @param {Popup} params.event.editor The editor popup\n     */\n    (e: 'beforeDependencyEditShow', params: ((event: { source: Scheduler, dependencyEdit: SchedulerDependencyEdit, dependencyRecord: SchedulerDependencyModel, editor: Popup }) => void)|string): void\n    /**\n     * Fires on the owning Scheduler or Gantt widget before a dependency is saved using the dependency edit popup\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source The scheduler or Gantt instance\n     * @param {SchedulerDependencyModel} params.event.dependencyRecord The dependency about to be saved\n     * @param {object} params.event.values The new values\n     */\n    (e: 'beforeDependencySave', params: ((event: { source: Scheduler, dependencyRecord: SchedulerDependencyModel, values: object }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * Fires before an object is destroyed.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Base} params.event.source The Object that is being destroyed.\n     */\n    (e: 'beforeDestroy', params: ((event: { source: Base }) => void)|string): void\n    /**\n     * Fires on the owning Scheduler at the beginning of the drag gesture. Returning `false` from a listener prevents\n     * the drag create operation from starting.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-beforeDragCreate)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source\n     * @param {SchedulerResourceModel} params.event.resourceRecord\n     * @param {Date} params.event.date The datetime associated with the drag start point.\n     */\n    (e: 'beforeDragCreate', params: ((event: { source: Scheduler, resourceRecord: SchedulerResourceModel, date: Date }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * Fires on the owning Scheduler to allow implementer to prevent immediate finalization by setting\n     * `data.context.async = true` in the listener, to show a confirmation popup etc.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-beforeDragCreateFinalize)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source Scheduler instance\n     * @param {SchedulerEventModel} params.event.eventRecord The event record being created\n     * @param {SchedulerResourceModel} params.event.resourceRecord The resource record\n     * @param {HTMLElement} params.event.eventElement The element representing the new Event record\n     * @param {object} params.event.context\n     * @param {Date} params.event.context.startDate The start date of the event being created\n     * @param {Date} params.event.context.endDate The end date of the event being created\n     * @param {boolean} params.event.context.async Set true to handle drag create asynchronously (e.g. to wait for user confirmation)\n     * @param {Function} params.event.context.finalize Call this method to finalize drag create. This method accepts one argument: pass true to update records, or false, to ignore changes\n     */\n    (e: 'beforeDragCreateFinalize', params: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, eventElement: HTMLElement, context: { startDate: Date, endDate: Date, async: boolean, finalize: Function } }) => void)|string): void\n    /**\n     * Fires before an event is added. Can be triggered by schedule double click or drag create action.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source The Scheduler instance\n     * @param {SchedulerEventModel} params.event.eventRecord The record about to be added\n     * @param {SchedulerResourceModel[]} params.event.resourceRecords Resources that the record is assigned to\n     * @param {SchedulerAssignmentModel[]} params.event.assignmentRecords The assignment records\n     */\n    (e: 'beforeEventAdd', params: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecords: SchedulerResourceModel[], assignmentRecords: SchedulerAssignmentModel[] }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * Fires before an event is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or by the\n     * event editor. Return `false` to immediately veto the removal (or a `Promise` yielding `true` or `false`\n     * for async vetoing).\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-beforeEventDelete)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler|any} params.event.source The Scheduler instance\n     * @param {SchedulerEventModel[]} params.event.eventRecords The records about to be deleted\n     * @param {object} params.event.context Additional removal context:\n     * @param {Function} params.event.context.finalize Function to call to finalize the removal. Used to asynchronously decide to remove the records or not. Provide `false` to the function to prevent the removal.\n     * @param {boolean} params.event.context.finalize.removeRecords Provide `false` to the function to prevent the removal.\n     */\n    (e: 'beforeEventDelete', params: ((event: { source: Scheduler|any, eventRecords: SchedulerEventModel[], context: { finalize: { removeRecords?: boolean } } }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * Fired on the owning Scheduler before event dragging starts. Return `false` to prevent the action.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source Scheduler instance\n     * @param {SchedulerEventModel} params.event.eventRecord Event record the drag starts from\n     * @param {SchedulerResourceModel} params.event.resourceRecord Resource record the drag starts from\n     * @param {SchedulerEventModel[]} params.event.eventRecords Event records being dragged\n     * @param {SchedulerAssignmentModel[]} params.event.assignmentRecords Assignment records being dragged\n     * @param {MouseEvent} params.event.domEvent Browser event\n     */\n    (e: 'beforeEventDrag', params: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, eventRecords: SchedulerEventModel[], assignmentRecords: SchedulerAssignmentModel[], domEvent: MouseEvent }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * Fires on the owning Scheduler before drag selection starts. Return false to prevent the operation.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Event} params.event.event The native browser DOM event\n     */\n    (e: 'beforeEventDragSelect', params: ((event: { event: Event }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * This event is fired on the owning Scheduler after the event drag operation completes, but before changing any data.\n     * It allows implementer to use asynchronous validation/finalization by setting `context.async = true`\n     * in the listener, for example, to show a confirmation popup, make async data request etc.\n     * In such case, implementer need to call the `context.finalize()` method manually:\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-beforeEventDropFinalize)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source Scheduler instance\n     * @param {object} params.event.context\n     * @param {DropData} params.event.context.dropData Information about the drop points for dragged events/assignments.\n     * @param {boolean} params.event.context.async Set to `true` to not finalize the drag-drop operation immediately (e.g. to wait for user confirmation)\n     * @param {SchedulerEventModel[]} params.event.context.eventRecords Event records being dragged\n     * @param {SchedulerAssignmentModel[]} params.event.context.assignmentRecords Assignment records being dragged\n     * @param {SchedulerEventModel} params.event.context.targetEventRecord Event record for drop target\n     * @param {SchedulerResourceModel} params.event.context.newResource Resource record for drop target\n     * @param {boolean} params.event.context.valid Set this to `false` to abort the drop immediately.\n     * @param {Function} params.event.context.finalize Call this method after an <strong>async</strong> finalization flow, to finalize the drag-drop operation. This method accepts one argument: pass `true` to update records, or `false` to ignore changes\n     * @param {MouseEvent} params.event.domEvent Browser event\n     */\n    (e: 'beforeEventDropFinalize', params: ((event: { source: Scheduler, context: { dropData: DropData, async: boolean, eventRecords: SchedulerEventModel[], assignmentRecords: SchedulerAssignmentModel[], targetEventRecord: SchedulerEventModel, newResource: SchedulerResourceModel, valid: boolean, finalize: Function }, domEvent: MouseEvent }) => void)|string): void\n    /**\n     * Fires on the owning Scheduler before an event is displayed in an editor.\n     * This may be listened for to allow an application to take over event editing duties. Returning `false`\n     * stops the default editing UI from being shown.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source The scheduler\n     * @param {EventEdit} params.event.eventEdit The eventEdit feature\n     * @param {SchedulerEventModel} params.event.eventRecord The record about to be shown in the event editor.\n     * @param {SchedulerResourceModel} params.event.resourceRecord The Resource record for the event. If the event is being created, it will not contain a resource, so this parameter specifies the resource the event is being created for.\n     * @param {HTMLElement} params.event.eventElement The element which represents the event in the scheduler display.\n     */\n    (e: 'beforeEventEdit', params: ((event: { source: Scheduler, eventEdit: EventEdit, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, eventElement: HTMLElement }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * Fires on the owning Scheduler when the editor for an event is available but before it is populated with\n     * data and shown. Allows manipulating fields etc.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source The scheduler\n     * @param {EventEdit} params.event.eventEdit The eventEdit feature\n     * @param {SchedulerEventModel} params.event.eventRecord The record about to be shown in the event editor.\n     * @param {SchedulerResourceModel} params.event.resourceRecord The Resource record for the event. If the event is being created, it will not contain a resource, so this parameter specifies the resource the event is being created for.\n     * @param {HTMLElement} params.event.eventElement The element which represents the event in the scheduler display.\n     * @param {Popup} params.event.editor The editor\n     */\n    (e: 'beforeEventEditShow', params: ((event: { source: Scheduler, eventEdit: EventEdit, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, eventElement: HTMLElement, editor: Popup }) => void)|string): void\n    /**\n     * Fired on the owning Scheduler before resizing starts. Return `false` to prevent the action.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source Scheduler instance\n     * @param {SchedulerEventModel} params.event.eventRecord Event record being resized\n     * @param {SchedulerResourceModel} params.event.resourceRecord Resource record the resize starts within\n     * @param {MouseEvent} params.event.event Browser event\n     */\n    (e: 'beforeEventResize', params: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * Fired on the owning Scheduler to allow implementer to prevent immediate finalization by setting\n     * `data.context.async = true` in the listener, to show a confirmation popup etc\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-beforeEventResizeFinalize)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source Scheduler instance\n     * @param {object} params.event.context [DEPRECATED] de-nested to outer params object\n     * @param {SchedulerEventModel} params.event.eventRecord Event record being resized\n     * @param {Date} params.event.startDate New startDate (changed if resizing start side)\n     * @param {Date} params.event.endDate New endDate (changed if resizing end side)\n     * @param {Date} params.event.originalStartDate Start date before resize\n     * @param {Date} params.event.originalEndDate End date before resize\n     * @param {boolean} params.event.async Set true to handle resize asynchronously (e.g. to wait for user confirmation)\n     * @param {Function} params.event.finalize Call this method to finalize resize. This method accepts one argument: pass `true` to update records, or `false`, to ignore changes\n     * @param {Event} params.event.event Browser event\n     * @param {EventResizeData[]} params.event.resizeData Data of all events that are being resized\n     */\n    (e: 'beforeEventResizeFinalize', params: ((event: { source: Scheduler, context: object, eventRecord: SchedulerEventModel, startDate: Date, endDate: Date, originalStartDate: Date, originalEndDate: Date, async: boolean, finalize: Function, event: Event, resizeData: EventResizeData[] }) => void)|string): void\n    /**\n     * Fires on the owning Scheduler before an event is saved.\n     * Return `false` to immediately prevent saving\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-beforeEventSave)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source The scheduler instance\n     * @param {SchedulerEventModel} params.event.eventRecord The record about to be saved\n     * @param {SchedulerResourceModel[]} params.event.resourceRecords The resources to which the event is assigned\n     * @param {object} params.event.values The new values\n     * @param {object} params.event.context Extended save context:\n     * @param {boolean} params.event.context.async Set this to `true` in a listener to indicate that the listener will asynchronously decide to prevent or not the event save.\n     * @param {Function} params.event.context.finalize Function to call to finalize the save. Used when `async` is `true`. Provide `false` to the function to prevent the save.\n     */\n    (e: 'beforeEventSave', params: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecords: SchedulerResourceModel[], values: object, context: { async?: boolean, finalize: Function } }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * Fired any time there is going to be a change to the events selected in the Scheduler.\n     * Returning `false` prevents the change\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {string} params.event.action One of the actions 'select', 'deselect', 'update', 'clear'\n     * @param {SchedulerEventModel[]} params.event.selected An array of events that will be added to the selection.\n     * @param {SchedulerEventModel[]} params.event.deselected An array of events that will be removed from the selection.\n     * @param {SchedulerEventModel[]} params.event.selection The currently selected events, before applying `selected` and `deselected`.\n     */\n    (e: 'beforeEventSelectionChange', params: ((event: { action: string, selected: SchedulerEventModel[], deselected: SchedulerEventModel[], selection: SchedulerEventModel[] }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * Fires on the owning Grid before Excel export starts. Return `false` to cancel the export.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {ExportConfig} params.event.config Export config\n     * @param {Column[]} params.event.columns An array of columns to export\n     * @param {Model[]} params.event.rows An array of records to export\n     */\n    (e: 'beforeExcelExport', params: ((event: { config: ExportConfig, columns: Column[], rows: Model[] }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * Fired before dragging of the FillHandle starts, return `false` to prevent the drag operation.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {GridLocation} params.event.cell Information about the column / record\n     * @param {MouseEvent} params.event.domEvent The raw DOM event\n     */\n    (e: 'beforeFillHandleDragStart', params: ((event: { cell: GridLocation, domEvent: MouseEvent }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * Fires on the owning Grid before the cell editing is finished, return false to signal that the value is invalid and editing should not be finalized.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.grid Target grid\n     * @param {GridLocation} params.event.editorContext Editing context\n     * @param {Editor} params.event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.\n     * @param {Column} params.event.editorContext.column Target column\n     * @param {Model} params.event.editorContext.record Target record\n     * @param {HTMLElement} params.event.editorContext.cell Target cell\n     * @param {any} params.event.editorContext.value Cell value\n     */\n    (e: 'beforeFinishCellEdit', params: ((event: { grid: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any } }) => void)|string): void\n    /**\n     * Triggered before a widget is hidden. Return `false` to prevent the action.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Widget} params.event.source The widget being hidden.\n     */\n    (e: 'beforeHide', params: ((event: { source: Widget }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * Fires on the owning Scheduler or Gantt widget before pan starts. Return `false` to prevent the operation.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Event} params.event.event The native browser DOM event\n     */\n    (e: 'beforePan', params: ((event: { event: Event }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * Fires on the owning Grid before a paste action is performed, return `false` to prevent the action\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source Owner grid\n     * @param {string} params.event.clipboardData The clipboardData about to be pasted\n     * @param {GridLocation} params.event.targetCell The cell from which the paste will be started\n     * @param {string} params.event.entityName 'cell' to distinguish this event from other beforePaste events\n     */\n    (e: 'beforePaste', params: ((event: { source: Grid, clipboardData: string, targetCell: GridLocation, entityName: string }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * Fires on the owning Grid before export started. Return `false` to cancel the export.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {object} params.event.config Export config\n     */\n    (e: 'beforePdfExport', params: ((event: { config: object }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * Fired before the [viewPreset](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineViewPresets#config-viewPreset) is changed.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source This Scheduler instance.\n     * @param {Date} params.event.startDate The new start date of the timeline.\n     * @param {Date} params.event.endDate The new end date of the timeline.\n     * @param {ViewPreset} params.event.from The outgoing ViewPreset.\n     * @param {ViewPreset} params.event.to The ViewPreset being switched to.\n     */\n    (e: 'beforePresetChange', params: ((event: { source: Scheduler, startDate: Date, endDate: Date, from: ViewPreset, to: ViewPreset }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * Fires before a row is rendered.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source The firing Grid instance.\n     * @param {Row} params.event.row The row about to be rendered.\n     * @param {Model} params.event.record The record for the row.\n     * @param {number} params.event.recordIndex The zero-based index of the record.\n     */\n    (e: 'beforeRenderRow', params: ((event: { source: Grid, row: Row, record: Model, recordIndex: number }) => void)|string): void\n    /**\n     * Grid rows are about to be rendered\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source This grid.\n     */\n    (e: 'beforeRenderRows', params: ((event: { source: Grid }) => void)|string): void\n    /**\n     * This event fires before row collapse is started.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-beforeRowCollapse)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Model} params.event.record Record\n     */\n    (e: 'beforeRowCollapse', params: ((event: { record: Model }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * This event fires before row expand is started.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-beforeRowExpand)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Model} params.event.record Record\n     */\n    (e: 'beforeRowExpand', params: ((event: { record: Model }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * Fires before the selection changes. Returning `false` from a listener prevents the change\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {string} params.event.action `'select'`/`'deselect'`\n     * @param {'row'|'cell'} params.event.mode `'row'`/`'cell'`\n     * @param {Grid} params.event.source\n     * @param {Model[]} params.event.deselected The records to be deselected in this operation.\n     * @param {Model[]} params.event.selected The records to be selected in this operation.\n     * @param {Model[]} params.event.selection The records in the current selection, before applying `selected` and `deselected`\n     * @param {GridLocation[]} params.event.deselectedCells The cells to be deselected in this operation.\n     * @param {GridLocation[]} params.event.selectedCells The cells to be selected in this operation.\n     * @param {GridLocation[]} params.event.cellSelection The cells in the current selection, before applying `selectedCells` and `deselectedCells`\n     */\n    (e: 'beforeSelectionChange', params: ((event: { action: string, mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: GridLocation[], selectedCells: GridLocation[], cellSelection: GridLocation[] }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * Fired before this container will load record values into its child fields. This is useful if you\n     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Container} params.event.source The container\n     * @param {Model} params.event.record The record\n     */\n    (e: 'beforeSetRecord', params: ((event: { source: Container, record: Model }) => void)|string): void\n    /**\n     * Triggered before a widget is shown. Return `false` to prevent the action.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Widget|any} params.event.source The widget being shown\n     */\n    (e: 'beforeShow', params: ((event: { source: Widget|any }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * Fired on the owning Scheduler/Gantt before showing dependency terminals on a task or event. Return `false` to\n     * prevent it\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {TimeSpan} params.event.source The hovered task\n     */\n    (e: 'beforeShowTerminals', params: ((event: { source: TimeSpan }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * Fired when a group is going to be expanded or collapsed using the UI.\n     * Returning `false` from a listener prevents the operation\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Model} params.event.groupRecord Group record\n     * @param {boolean} params.event.collapse Collapsed (true) or expanded (false)\n     * @param {Event} params.event.domEvent The user interaction event (eg a `click` event) if the toggle request was instigated by user interaction.\n     */\n    (e: 'beforeToggleGroup', params: ((event: { groupRecord: Model, collapse: boolean, domEvent: Event }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * Fired before a parent node record toggles its collapsed state.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source The firing Grid instance.\n     * @param {Model} params.event.record The record being toggled.\n     * @param {boolean} params.event.collapse `true` if the node is being collapsed.\n     */\n    (e: 'beforeToggleNode', params: ((event: { source: Grid, record: Model, collapse: boolean }) => void)|string): void\n    /**\n     * Fires on the owning Grid when editing is cancelled\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source Owner grid\n     * @param {GridLocation} params.event.editorContext Editing context\n     * @param {Event} params.event.event Included if the cancellation was triggered by a DOM event\n     */\n    (e: 'cancelCellEdit', params: ((event: { source: Grid, editorContext: GridLocation, event: Event }) => void)|string): void\n    /**\n     * Fires when any other event is fired from the object.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-catchAll)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {{[key: string]: any, type: string}} params.event.event The Object that contains event details\n     * @param {string} params.event.event.type The type of the event which is caught by the listener\n     */\n    (e: 'catchAll', params: ((event: {[key: string]: any, type: string}) => void)|string): void\n    /**\n     * Fired when user clicks in a grid cell\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.grid The grid instance\n     * @param {Model} params.event.record The record representing the row\n     * @param {Column} params.event.column The column to which the cell belongs\n     * @param {HTMLElement} params.event.cellElement The cell HTML element\n     * @param {HTMLElement} params.event.target The target element\n     * @param {MouseEvent} params.event.event The native DOM event\n     */\n    (e: 'cellClick', params: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string): void\n    /**\n     * Fired when user activates contextmenu in a grid cell\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.grid The grid instance\n     * @param {Model} params.event.record The record representing the row\n     * @param {Column} params.event.column The column to which the cell belongs\n     * @param {HTMLElement} params.event.cellElement The cell HTML element\n     * @param {HTMLElement} params.event.target The target element\n     * @param {MouseEvent} params.event.event The native DOM event\n     */\n    (e: 'cellContextMenu', params: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string): void\n    /**\n     * Fired when user double clicks a grid cell\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.grid The grid instance\n     * @param {Model} params.event.record The record representing the row\n     * @param {Column} params.event.column The column to which the cell belongs\n     * @param {HTMLElement} params.event.cellElement The cell HTML element\n     * @param {HTMLElement} params.event.target The target element\n     * @param {MouseEvent} params.event.event The native DOM event\n     */\n    (e: 'cellDblClick', params: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string): void\n    /**\n     * This event fires on the owning grid before the context menu is shown for a cell.\n     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/CellMenu#config-processItems).\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-cellMenuBeforeShow)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source The grid\n     * @param {Menu} params.event.menu The menu\n     * @param {Record<string, MenuItemConfig>} params.event.items Menu item configs\n     * @param {Column} params.event.column Column\n     * @param {Model} params.event.record Record\n     */\n    (e: 'cellMenuBeforeShow', params: ((event: { source: Grid, menu: Menu, items: Record<string, MenuItemConfig>, column: Column, record: Model }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * This event fires on the owning grid when an item is selected in the cell context menu.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source The grid\n     * @param {Menu} params.event.menu The menu\n     * @param {MenuItem} params.event.item Selected menu item\n     * @param {Column} params.event.column Column\n     * @param {Model} params.event.record Record\n     */\n    (e: 'cellMenuItem', params: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, record: Model }) => void)|string): void\n    /**\n     * This event fires on the owning grid after the context menu is shown for a cell.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source The grid\n     * @param {Menu} params.event.menu The menu\n     * @param {Record<string, MenuItemConfig>} params.event.items Menu item configs\n     * @param {Column} params.event.column Column\n     * @param {Model} params.event.record Record\n     */\n    (e: 'cellMenuShow', params: ((event: { source: Grid, menu: Menu, items: Record<string, MenuItemConfig>, column: Column, record: Model }) => void)|string): void\n    /**\n     * This event fires on the owning grid when a check item is toggled in the cell context menu.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source The grid\n     * @param {Menu} params.event.menu The menu\n     * @param {MenuItem} params.event.item Selected menu item\n     * @param {Column} params.event.column Column\n     * @param {Model} params.event.record Record\n     * @param {boolean} params.event.checked Checked or not\n     */\n    (e: 'cellMenuToggleItem', params: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, record: Model, checked: boolean }) => void)|string): void\n    /**\n     * Fired when the mouse enters a cell\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source The grid instance\n     * @param {Model} params.event.record The record representing the hovered cell\n     * @param {Column} params.event.column The column currently hovered\n     * @param {HTMLElement} params.event.cellElement The cell HTML element\n     * @param {MouseEvent} params.event.event The native DOM event\n     */\n    (e: 'cellMouseEnter', params: ((event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void)|string): void\n    /**\n     * Fired when the mouse leaves a cell\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source The grid instance\n     * @param {Model} params.event.record The record representing the cell that the mouse left\n     * @param {Column} params.event.column The column representing the cell that the mouse left\n     * @param {HTMLElement} params.event.cellElement The cell HTML element that the mouse left\n     * @param {MouseEvent} params.event.event The native DOM event\n     */\n    (e: 'cellMouseLeave', params: ((event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void)|string): void\n    /**\n     * Fired when a user moves the mouse out of a grid cell\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.grid The grid instance\n     * @param {Model} params.event.record The record representing the row\n     * @param {Column} params.event.column The column to which the cell belongs\n     * @param {HTMLElement} params.event.cellElement The cell HTML element\n     * @param {HTMLElement} params.event.target The target element\n     * @param {MouseEvent} params.event.event The native DOM event\n     */\n    (e: 'cellMouseOut', params: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string): void\n    /**\n     * Fired when user moves the mouse over a grid cell\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.grid The grid instance\n     * @param {Model} params.event.record The record representing the row\n     * @param {Column} params.event.column The column to which the cell belongs\n     * @param {HTMLElement} params.event.cellElement The cell HTML element\n     * @param {HTMLElement} params.event.target The target element\n     * @param {MouseEvent} params.event.event The native DOM event\n     */\n    (e: 'cellMouseOver', params: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string): void\n    /**\n     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsible) setting.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Panel} params.event.source This Panel.\n     */\n    (e: 'collapse', params: ((event: { source: Panel }) => void)|string): void\n    /**\n     * Fired before a parent node record is collapsed.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source The firing Grid instance.\n     * @param {Model} params.event.record The record which has been collapsed.\n     */\n    (e: 'collapseNode', params: ((event: { source: Grid, record: Model }) => void)|string): void\n    /**\n     * This event is fired when a column is being dragged, and you can set the `valid` flag on t\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source The grid instance.\n     * @param {Column} params.event.column The dragged column.\n     * @param {Column} params.event.insertBefore The column before which the dragged column will be inserted.\n     * @param {Event} params.event.event The browser event.\n     * @param {object} params.event.context\n     * @param {boolean} params.event.context.valid Set this to true or false to indicate whether the drop position is valid.\n     */\n    (e: 'columnDrag', params: ((event: { source: Grid, column: Column, insertBefore: Column, event: Event, context: { valid: boolean } }) => void)|string): void\n    /**\n     * This event is fired when a column drag gesture has started.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source The grid instance.\n     * @param {Column} params.event.column The dragged column.\n     * @param {Event} params.event.event The browser event.\n     */\n    (e: 'columnDragStart', params: ((event: { source: Grid, column: Column, event: Event }) => void)|string): void\n    /**\n     * This event is always fired after a column is dropped. The `valid` param is true if the operation was not\n     * vetoed and the column was moved in the column store.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source The grid instance.\n     * @param {Column} params.event.column The dragged column.\n     * @param {Column} params.event.insertBefore The column before which the dragged column will be inserted.\n     * @param {Column} params.event.newParent The new parent column.\n     * @param {boolean} params.event.valid true if the operation was not vetoed.\n     * @param {Event} params.event.event The browser event.\n     * @param {string} params.event.region The region where the column was dropped.\n     */\n    (e: 'columnDrop', params: ((event: { source: Grid, column: Column, insertBefore: Column, newParent: Column, valid: boolean, event: Event, region: string }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * This event is fired after a resize gesture is completed.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source The grid instance\n     * @param {Column} params.event.column The resized column\n     * @param {Event} params.event.domEvent The browser event\n     */\n    (e: 'columnResize', params: ((event: { source: Grid, column: Column, domEvent: Event }) => void)|string): void\n    /**\n     * This event is fired when a column resize gesture starts.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source The grid instance\n     * @param {Column} params.event.column The column\n     * @param {Event} params.event.domEvent The browser event\n     */\n    (e: 'columnResizeStart', params: ((event: { source: Grid, column: Column, domEvent: Event }) => void)|string): void\n    /**\n     * This event fires on the owning widget when an item is selected in the context menu.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Widget} params.event.source The owning widget\n     * @param {Menu} params.event.menu The menu\n     * @param {MenuItem} params.event.item Selected menu item\n     */\n    (e: 'contextMenuItem', params: ((event: { source: Widget, menu: Menu, item: MenuItem }) => void)|string): void\n    /**\n     * This event fires on the owning widget when a check item is toggled in the context menu.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Widget} params.event.source The owning widget\n     * @param {Menu} params.event.menu The menu\n     * @param {MenuItem} params.event.item Selected menu item\n     * @param {boolean} params.event.checked Checked or not\n     */\n    (e: 'contextMenuToggleItem', params: ((event: { source: Widget, menu: Menu, item: MenuItem, checked: boolean }) => void)|string): void\n    /**\n     * Fires on the owning Grid after a copy action is performed.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source Owner grid\n     * @param {GridLocation[]} params.event.cells The cells about to be copied or cut\n     * @param {string} params.event.copiedDataString The concatenated data string that was copied or cut\n     * @param {boolean} params.event.isCut `true` if this was a cut action\n     * @param {string} params.event.entityName 'cell' to distinguish this event from other copy events\n     */\n    (e: 'copy', params: ((event: { source: Grid, cells: GridLocation[], copiedDataString: string, isCut: boolean, entityName: string }) => void)|string): void\n    /**\n     * Fires on the owning Scheduler/Gantt when the line indicating the current time is updated (see [currentTimeLineUpdateInterval](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/TimeRanges#config-currentTimeLineUpdateInterval)).\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source The scheduler\n     * @param {Date} params.event.date The current date\n     */\n    (e: 'currentTimelineUpdate', params: ((event: { source: Scheduler, date: Date }) => void)|string): void\n    /**\n     * Fired when data in the store changes.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-dataChange)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source Owning grid\n     * @param {Store} params.event.store The originating store\n     * @param {'remove'|'removeAll'|'add'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} params.event.action Name of action which triggered the change. May be one of:  * `'remove'` * `'removeAll'` * `'add'` * `'clearchanges'` * `'filter'` * `'update'` * `'dataset'` * `'replace'`\n     * @param {Model} params.event.record Changed record, for actions that affects exactly one record (`'update'`)\n     * @param {Model[]} params.event.records Changed records, passed for all actions except `'removeAll'`\n     * @param {object} params.event.changes Passed for the `'update'` action, info on which record fields changed\n     */\n    (e: 'dataChange', params: ((event: { source: Grid, store: Store, action: 'remove'|'removeAll'|'add'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string): void\n    /**\n     * Fired when the range of dates encapsulated by the UI changes. This will be when\n     * moving a view in time by reconfiguring its [timeAxis](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineBase#config-timeAxis). This will happen\n     * when zooming, or changing [viewPreset](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/TimelineBase#config-viewPreset).\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-dateRangeChange)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {TimelineBase} params.event.source This Scheduler/Gantt instance.\n     * @param {object} params.event.old The old date range\n     * @param {Date} params.event.old.startDate the old start date.\n     * @param {Date} params.event.old.endDate the old end date.\n     * @param {object} params.event.new The new date range\n     * @param {Date} params.event.new.startDate the new start date.\n     * @param {Date} params.event.new.endDate the new end date.\n     */\n    (e: 'dateRangeChange', params: ((event: { source: TimelineBase, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string): void\n    /**\n     * Fired when dependencies are rendered\n     */\n    (e: 'dependenciesDrawn', params: (() => void)|string): void\n    /**\n     * Fires on the owning Scheduler/Gantt when a click is registered on a dependency line.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source The scheduler\n     * @param {SchedulerDependencyModel} params.event.dependency\n     * @param {MouseEvent} params.event.event\n     */\n    (e: 'dependencyClick', params: ((event: { source: Scheduler, dependency: SchedulerDependencyModel, event: MouseEvent }) => void)|string): void\n    /**\n     * Fires on the owning Scheduler/Gantt when a context menu event is registered on a dependency line.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source The scheduler\n     * @param {SchedulerDependencyModel} params.event.dependency\n     * @param {MouseEvent} params.event.event\n     */\n    (e: 'dependencyContextMenu', params: ((event: { source: Scheduler, dependency: SchedulerDependencyModel, event: MouseEvent }) => void)|string): void\n    /**\n     * Fired on the owning Scheduler/Gantt when a dependency creation drag operation starts\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {TimeSpan} params.event.source The source task\n     */\n    (e: 'dependencyCreateDragStart', params: ((event: { source: TimeSpan }) => void)|string): void\n    /**\n     * Fired on the owning Scheduler/Gantt when a dependency drag creation operation succeeds\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {TimeSpan} params.event.source The source task\n     * @param {TimeSpan} params.event.target The target task\n     * @param {DependencyBaseModel} params.event.dependency The created dependency\n     */\n    (e: 'dependencyCreateDrop', params: ((event: { source: TimeSpan, target: TimeSpan, dependency: DependencyBaseModel }) => void)|string): void\n    /**\n     * Fires on the owning Scheduler/Gantt when a double click is registered on a dependency line.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source The scheduler\n     * @param {SchedulerDependencyModel} params.event.dependency\n     * @param {MouseEvent} params.event.event\n     */\n    (e: 'dependencyDblClick', params: ((event: { source: Scheduler, dependency: SchedulerDependencyModel, event: MouseEvent }) => void)|string): void\n    /**\n     * Fires on the owning Scheduler/Gantt when the mouse moves out of a dependency line.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source The scheduler\n     * @param {SchedulerDependencyModel} params.event.dependency\n     * @param {MouseEvent} params.event.event\n     */\n    (e: 'dependencyMouseOut', params: ((event: { source: Scheduler, dependency: SchedulerDependencyModel, event: MouseEvent }) => void)|string): void\n    /**\n     * Fires on the owning Scheduler/Gantt when the mouse moves over a dependency line.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source The scheduler\n     * @param {SchedulerDependencyModel} params.event.dependency\n     * @param {MouseEvent} params.event.event\n     */\n    (e: 'dependencyMouseOver', params: ((event: { source: Scheduler, dependency: SchedulerDependencyModel, event: MouseEvent }) => void)|string): void\n    /**\n     * Fired on the owning Scheduler/Gantt when asynchronous dependency validation completes\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {TimeSpan} params.event.source The source task\n     * @param {TimeSpan} params.event.target The target task\n     * @param {number} params.event.dependencyType The dependency type, see [Type](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/DependencyBaseModel#property-Type-static)\n     */\n    (e: 'dependencyValidationComplete', params: ((event: { source: TimeSpan, target: TimeSpan, dependencyType: number }) => void)|string): void\n    /**\n     * Fired on the owning Scheduler/Gantt when asynchronous dependency validation starts\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {TimeSpan} params.event.source The source task\n     * @param {TimeSpan} params.event.target The target task\n     * @param {number} params.event.dependencyType The dependency type, see [Type](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/model/DependencyBaseModel#property-Type-static)\n     */\n    (e: 'dependencyValidationStart', params: ((event: { source: TimeSpan, target: TimeSpan, dependencyType: number }) => void)|string): void\n    /**\n     * Fires when an object is destroyed.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Base} params.event.source The Object that is being destroyed.\n     */\n    (e: 'destroy', params: ((event: { source: Base }) => void)|string): void\n    /**\n     * Fires on the owning Scheduler after the new event has been created.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source\n     * @param {SchedulerEventModel} params.event.eventRecord The new `EventModel` record.\n     * @param {SchedulerResourceModel} params.event.resourceRecord The resource for the row in which the event is being created.\n     * @param {MouseEvent} params.event.event The ending mouseup event.\n     * @param {HTMLElement} params.event.eventElement The DOM element representing the newly created event un the UI.\n     */\n    (e: 'dragCreateEnd', params: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, event: MouseEvent, eventElement: HTMLElement }) => void)|string): void\n    /**\n     * Fires on the owning Scheduler after the drag start has created a new Event record.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source\n     * @param {SchedulerEventModel} params.event.eventRecord The event record being created\n     * @param {SchedulerResourceModel} params.event.resourceRecord The resource record\n     * @param {HTMLElement} params.event.eventElement The element representing the new event.\n     */\n    (e: 'dragCreateStart', params: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, eventElement: HTMLElement }) => void)|string): void\n    /**\n     * Fires while drag selecting. UI will update with current range, but the cells will not be selected until\n     * mouse up. This event can be listened for to perform actions while drag selecting.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source\n     * @param {GridLocationConfig[]|GridLocation[]} params.event.selectedCells The cells that is currently being dragged over\n     * @param {Model[]} params.event.selectedRecords The records that is currently being dragged over\n     */\n    (e: 'dragSelecting', params: ((event: { source: Grid, selectedCells: GridLocationConfig[]|GridLocation[], selectedRecords: Model[] }) => void)|string): void\n    /**\n     * Fired when a double click or drag gesture has created a new event and added it to the event store.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source This Scheduler.\n     * @param {SchedulerEventModel} params.event.eventRecord The new event record.\n     * @param {SchedulerResourceModel} params.event.resourceRecord The resource assigned to the new event.\n     */\n    (e: 'eventAutoCreated', params: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel }) => void)|string): void\n    /**\n     * Triggered for click on an event.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source This Scheduler\n     * @param {SchedulerEventModel} params.event.eventRecord Event record\n     * @param {SchedulerAssignmentModel} params.event.assignmentRecord Assignment record\n     * @param {MouseEvent} params.event.event Browser event\n     */\n    (e: 'eventClick', params: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string): void\n    /**\n     * Triggered for right-click on an event.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source This Scheduler\n     * @param {SchedulerEventModel} params.event.eventRecord Event record\n     * @param {SchedulerAssignmentModel} params.event.assignmentRecord Assignment record\n     * @param {MouseEvent} params.event.event Browser event\n     */\n    (e: 'eventContextMenu', params: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string): void\n    /**\n     * Triggered for double-click on an event.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source This Scheduler\n     * @param {SchedulerEventModel} params.event.eventRecord Event record\n     * @param {SchedulerAssignmentModel} params.event.assignmentRecord Assignment record\n     * @param {MouseEvent} params.event.event Browser event\n     */\n    (e: 'eventDblClick', params: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string): void\n    /**\n     * Fired on the owning Scheduler when event is dragged\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source Scheduler instance\n     * @param {SchedulerEventModel[]} params.event.eventRecords Event records being dragged\n     * @param {SchedulerAssignmentModel[]} params.event.assignmentRecords Assignment records being dragged\n     * @param {Date} params.event.startDate Start date for the current location\n     * @param {Date} params.event.endDate End date for the current location\n     * @param {SchedulerResourceModel} params.event.resourceRecord Resource record the drag started from\n     * @param {SchedulerResourceModel} params.event.newResource Resource at the current location\n     * @param {object} params.event.context\n     * @param {boolean} params.event.context.valid Set this to `false` to signal that the current drop position is invalid.\n     * @param {MouseEvent} params.event.domEvent Browser event\n     */\n    (e: 'eventDrag', params: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], assignmentRecords: SchedulerAssignmentModel[], startDate: Date, endDate: Date, resourceRecord: SchedulerResourceModel, newResource: SchedulerResourceModel, context: { valid: boolean }, domEvent: MouseEvent }) => void)|string): void\n    /**\n     * Fired on the owning Scheduler after an event drag operation has been aborted\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source Scheduler instance\n     * @param {SchedulerEventModel[]} params.event.eventRecords Event records being dragged\n     * @param {SchedulerAssignmentModel[]} params.event.assignmentRecords Assignment records being dragged\n     * @param {MouseEvent} params.event.domEvent Browser event\n     */\n    (e: 'eventDragAbort', params: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], assignmentRecords: SchedulerAssignmentModel[], domEvent: MouseEvent }) => void)|string): void\n    /**\n     * Triggered when drag mode is changed, for example when copy key is\n     * pressed or released while dragging.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {string} params.event.mode Drag mode, could be either 'move', 'copy', or 'auto'\n     */\n    (e: 'eventDragModeChange', params: ((event: { mode: string }) => void)|string): void\n    /**\n     * Fired on the owning Scheduler after an event drag operation regardless of the operation being cancelled or not\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source Scheduler instance\n     */\n    (e: 'eventDragReset', params: ((event: { source: Scheduler }) => void)|string): void\n    /**\n     * Fired on the owning Scheduler when event dragging starts\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source Scheduler instance\n     * @param {SchedulerResourceModel} params.event.resourceRecord Resource record the drag starts from\n     * @param {SchedulerEventModel[]} params.event.eventRecords Event records being dragged\n     * @param {SchedulerAssignmentModel[]} params.event.assignmentRecords Assignment records being dragged\n     * @param {MouseEvent} params.event.domEvent Browser event\n     */\n    (e: 'eventDragStart', params: ((event: { source: Scheduler, resourceRecord: SchedulerResourceModel, eventRecords: SchedulerEventModel[], assignmentRecords: SchedulerAssignmentModel[], domEvent: MouseEvent }) => void)|string): void\n    /**\n     * Fired on the owning Scheduler when an event is dropped\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source\n     * @param {SchedulerEventModel[]} params.event.eventRecords\n     * @param {SchedulerAssignmentModel[]} params.event.assignmentRecords\n     * @param {HTMLElement} params.event.externalDropTarget The HTML element dropped upon, if drop happened on a valid external drop target\n     * @param {boolean} params.event.isCopy\n     * @param {object} params.event.context\n     * @param {SchedulerEventModel} params.event.context.targetEventRecord Event record for drop target\n     * @param {SchedulerResourceModel} params.event.context.newResource Resource record for drop target\n     * @param {MouseEvent} params.event.domEvent Browser event\n     */\n    (e: 'eventDrop', params: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], assignmentRecords: SchedulerAssignmentModel[], externalDropTarget: HTMLElement, isCopy: boolean, context: { targetEventRecord: SchedulerEventModel, newResource: SchedulerResourceModel }, domEvent: MouseEvent }) => void)|string): void\n    /**\n     * Fired before the editor will load the event record data into its input fields. This is useful if you\n     * want to modify the fields before data is loaded (e.g. set some input field to be readonly)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Container} params.event.source The editor widget\n     * @param {SchedulerEventModel} params.event.record The record\n     */\n    (e: 'eventEditBeforeSetRecord', params: ((event: { source: Container, record: SchedulerEventModel }) => void)|string): void\n    /**\n     * Triggered when a keydown event is observed if there are selected events.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source This Scheduler\n     * @param {SchedulerEventModel[]} params.event.eventRecords The selected event records\n     * @param {SchedulerAssignmentModel[]} params.event.assignmentRecords The selected assignment records\n     * @param {KeyboardEvent} params.event.event Browser event\n     */\n    (e: 'eventKeyDown', params: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], assignmentRecords: SchedulerAssignmentModel[], event: KeyboardEvent }) => void)|string): void\n    /**\n     * Triggered when a keyup event is observed if there are selected events.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source This Scheduler\n     * @param {SchedulerEventModel[]} params.event.eventRecords The selected event records\n     * @param {SchedulerAssignmentModel[]} params.event.assignmentRecords The selected assignment records\n     * @param {KeyboardEvent} params.event.event Browser event\n     */\n    (e: 'eventKeyUp', params: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], assignmentRecords: SchedulerAssignmentModel[], event: KeyboardEvent }) => void)|string): void\n    /**\n     * This event fires on the owning Scheduler before the context menu is shown for an event. Allows manipulation of the items\n     * to show in the same way as in `processItems`. Returning `false` from a listener prevents the menu from\n     * being shown.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source\n     * @param {Record<string, MenuItemConfig>} params.event.items Menu item configs\n     * @param {SchedulerEventModel} params.event.eventRecord Event record for which the menu was triggered\n     * @param {SchedulerResourceModel} params.event.resourceRecord Resource record\n     * @param {SchedulerAssignmentModel} params.event.assignmentRecord Assignment record, if assignments are used\n     * @param {HTMLElement} params.event.eventElement\n     * @param {MouseEvent} params.event.event Pointer event which triggered the context menu (if any)\n     */\n    (e: 'eventMenuBeforeShow', params: ((event: { source: Scheduler, items: Record<string, MenuItemConfig>, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, assignmentRecord: SchedulerAssignmentModel, eventElement: HTMLElement, event?: MouseEvent }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * This event fires on the owning Scheduler when an item is selected in the context menu.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source\n     * @param {MenuItem} params.event.item\n     * @param {SchedulerEventModel} params.event.eventRecord\n     * @param {SchedulerResourceModel} params.event.resourceRecord\n     * @param {SchedulerAssignmentModel} params.event.assignmentRecord Assignment record, if assignments are used\n     * @param {HTMLElement} params.event.eventElement\n     */\n    (e: 'eventMenuItem', params: ((event: { source: Scheduler, item: MenuItem, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, assignmentRecord: SchedulerAssignmentModel, eventElement: HTMLElement }) => void)|string): void\n    /**\n     * This event fires on the owning Scheduler after showing the context menu for an event\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source\n     * @param {Menu} params.event.menu The menu\n     * @param {SchedulerEventModel} params.event.eventRecord Event record for which the menu was triggered\n     * @param {SchedulerResourceModel} params.event.resourceRecord Resource record\n     * @param {SchedulerAssignmentModel} params.event.assignmentRecord Assignment record, if assignments are used\n     * @param {HTMLElement} params.event.eventElement\n     */\n    (e: 'eventMenuShow', params: ((event: { source: Scheduler, menu: Menu, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, assignmentRecord: SchedulerAssignmentModel, eventElement: HTMLElement }) => void)|string): void\n    /**\n     * Triggered for mouse down on an event.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source This Scheduler\n     * @param {SchedulerEventModel} params.event.eventRecord Event record\n     * @param {SchedulerAssignmentModel} params.event.assignmentRecord Assignment record\n     * @param {MouseEvent} params.event.event Browser event\n     */\n    (e: 'eventMouseDown', params: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string): void\n    /**\n     * Triggered when the mouse enters an event bar.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source This Scheduler\n     * @param {SchedulerEventModel} params.event.eventRecord Event record\n     * @param {SchedulerAssignmentModel} params.event.assignmentRecord Assignment record\n     * @param {MouseEvent} params.event.event Browser event\n     */\n    (e: 'eventMouseEnter', params: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string): void\n    /**\n     * Triggered when the mouse leaves an event bar.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source This Scheduler\n     * @param {SchedulerEventModel} params.event.eventRecord Event record\n     * @param {SchedulerAssignmentModel} params.event.assignmentRecord Assignment record\n     * @param {MouseEvent} params.event.event Browser event\n     */\n    (e: 'eventMouseLeave', params: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string): void\n    /**\n     * Triggered for mouse out events within and when moving out of an event bar.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-eventMouseOut)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source This Scheduler\n     * @param {SchedulerEventModel} params.event.eventRecord Event record\n     * @param {SchedulerAssignmentModel} params.event.assignmentRecord Assignment record\n     * @param {MouseEvent} params.event.event Browser event\n     */\n    (e: 'eventMouseOut', params: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string): void\n    /**\n     * Triggered for mouse over events when moving into and within an event bar.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-eventMouseOver)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source This Scheduler\n     * @param {SchedulerEventModel} params.event.eventRecord Event record\n     * @param {SchedulerAssignmentModel} params.event.assignmentRecord Assignment record\n     * @param {MouseEvent} params.event.event Browser event\n     */\n    (e: 'eventMouseOver', params: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string): void\n    /**\n     * Triggered for mouse up on an event.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source This Scheduler\n     * @param {SchedulerEventModel} params.event.eventRecord Event record\n     * @param {SchedulerAssignmentModel} params.event.assignmentRecord Assignment record\n     * @param {MouseEvent} params.event.event Browser event\n     */\n    (e: 'eventMouseUp', params: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, assignmentRecord: SchedulerAssignmentModel, event: MouseEvent }) => void)|string): void\n    /**\n     * Fires on the owning Scheduler on each resize move event\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source Scheduler instance\n     * @param {SchedulerEventModel} params.event.eventRecord Event record being resized\n     * @param {Date} params.event.startDate\n     * @param {Date} params.event.endDate\n     * @param {HTMLElement} params.event.element\n     * @param {EventResizeData[]} params.event.resizeData Resize data for selected events\n     */\n    (e: 'eventPartialResize', params: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, startDate: Date, endDate: Date, element: HTMLElement, resizeData: EventResizeData[] }) => void)|string): void\n    /**\n     * Fires on the owning Scheduler after the resizing gesture has finished.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source Scheduler instance\n     * @param {boolean} params.event.changed Shows if the record has been changed by the resize action\n     * @param {SchedulerEventModel} params.event.eventRecord Event record being resized\n     * @param {EventResizeData[]} params.event.resizeData Resize data for selected events\n     */\n    (e: 'eventResizeEnd', params: ((event: { source: Scheduler, changed: boolean, eventRecord: SchedulerEventModel, resizeData: EventResizeData[] }) => void)|string): void\n    /**\n     * Fires on the owning Scheduler when event resizing starts\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source Scheduler instance\n     * @param {SchedulerEventModel} params.event.eventRecord Event record being resized\n     * @param {SchedulerResourceModel} params.event.resourceRecord Resource record the resize starts within\n     * @param {MouseEvent} params.event.event Browser event\n     * @param {EventResizeData[]} params.event.resizeData Resize data for selected events. Only available when [resizeSelected](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/EventResize#config-resizeSelected) is `true`\n     */\n    (e: 'eventResizeStart', params: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, event: MouseEvent, resizeData: EventResizeData[] }) => void)|string): void\n    /**\n     * Fired any time there is a change to the events selected in the Scheduler.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {'select'|'deselect'|'update'|'clear'} params.event.action One of the actions 'select', 'deselect', 'update', 'clear'\n     * @param {SchedulerEventModel[]} params.event.selected An array of the Events added to the selection.\n     * @param {SchedulerEventModel[]} params.event.deselected An array of the Event removed from the selection.\n     * @param {SchedulerEventModel[]} params.event.selection The new selection.\n     */\n    (e: 'eventSelectionChange', params: ((event: { action: 'select'|'deselect'|'update'|'clear', selected: SchedulerEventModel[], deselected: SchedulerEventModel[], selection: SchedulerEventModel[] }) => void)|string): void\n    /**\n     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-collapsible) setting.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Panel} params.event.source This Panel.\n     */\n    (e: 'expand', params: ((event: { source: Panel }) => void)|string): void\n    /**\n     * Fired after a parent node record is expanded.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source The firing Grid instance.\n     * @param {Model} params.event.record The record which has been expanded.\n     */\n    (e: 'expandNode', params: ((event: { source: Grid, record: Model }) => void)|string): void\n    /**\n     * Fired when a file is dropped on the widget element\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source The owning Grid instance\n     * @param {DataTransferItem} params.event.file The dropped file descriptor\n     * @param {DragEvent} params.event.domEvent The native DragEvent\n     */\n    (e: 'fileDrop', params: ((event: { source: Grid, file: DataTransferItem, domEvent: DragEvent }) => void)|string): void\n    /**\n     * Fired before the FillHandle dragging is finalized and values are applied to cells, return `false` to prevent the\n     * drag operation from applying data changes.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {GridLocation} params.event.from The from cell\n     * @param {GridLocation} params.event.to The to cell\n     * @param {MouseEvent} params.event.domEvent The raw DOM event\n     */\n    (e: 'fillHandleBeforeDragFinalize', params: ((event: { from: GridLocation, to: GridLocation, domEvent: MouseEvent }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * Fired while dragging the FillHandle.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {GridLocation} params.event.from The from cell\n     * @param {GridLocation} params.event.to The to cell\n     * @param {MouseEvent} params.event.domEvent The raw DOM event\n     */\n    (e: 'fillHandleDrag', params: ((event: { from: GridLocation, to: GridLocation, domEvent: MouseEvent }) => void)|string): void\n    /**\n     * Fired when a FillHandle drag operation is aborted.\n     */\n    (e: 'fillHandleDragAbort', params: (() => void)|string): void\n    /**\n     * Fired after a FillHandle drag operation.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {GridLocation} params.event.from The from cell\n     * @param {GridLocation} params.event.to The to cell\n     * @param {MouseEvent} params.event.domEvent The raw DOM event\n     */\n    (e: 'fillHandleDragEnd', params: ((event: { from: GridLocation, to: GridLocation, domEvent: MouseEvent }) => void)|string): void\n    /**\n     * Fired when dragging of the FillHandle starts.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {GridLocation} params.event.cell Information about the column / record\n     * @param {MouseEvent} params.event.domEvent The raw DOM event\n     */\n    (e: 'fillHandleDragStart', params: ((event: { cell: GridLocation, domEvent: MouseEvent }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * Fires on the owning Grid when cell editing is finished\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.grid Target grid\n     * @param {GridLocation} params.event.editorContext Editing context\n     * @param {Editor} params.event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.\n     * @param {Column} params.event.editorContext.column Target column\n     * @param {Model} params.event.editorContext.record Target record\n     * @param {HTMLElement} params.event.editorContext.cell Target cell\n     * @param {any} params.event.editorContext.value Cell value\n     */\n    (e: 'finishCellEdit', params: ((event: { grid: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any } }) => void)|string): void\n    /**\n     * Fired when focus enters this Widget.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Widget} params.event.source This Widget\n     * @param {HTMLElement} params.event.fromElement The element which lost focus.\n     * @param {HTMLElement} params.event.toElement The element which gained focus.\n     * @param {Widget} params.event.fromWidget The widget which lost focus.\n     * @param {Widget} params.event.toWidget The widget which gained focus.\n     * @param {boolean} params.event.backwards `true` if the `toElement` is before the `fromElement` in document order.\n     */\n    (e: 'focusIn', params: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string): void\n    /**\n     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.\n     * focus moving from within this Widget's ownership tree, even if there are floating widgets\n     * will not trigger this event. This is when focus exits this widget completely.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Widget} params.event.source This Widget\n     * @param {HTMLElement} params.event.fromElement The element which lost focus.\n     * @param {HTMLElement} params.event.toElement The element which gained focus.\n     * @param {Widget} params.event.fromWidget The widget which lost focus.\n     * @param {Widget} params.event.toWidget The widget which gained focus.\n     * @param {boolean} params.event.backwards `true` if the `toElement` is before the `fromElement` in document order.\n     */\n    (e: 'focusOut', params: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string): void\n    /**\n     * Fired before dragging starts, return false to prevent the drag operation.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {GridBase} params.event.source\n     * @param {object} params.event.context\n     * @param {Model[]} params.event.context.records The dragged row records\n     * @param {MouseEvent|TouchEvent} params.event.event\n     */\n    (e: 'gridRowBeforeDragStart', params: ((event: { source: GridBase, context: { records: Model[] }, event: MouseEvent|TouchEvent }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * Fired before the row drop operation is finalized. You can return false to abort the drop operation, or a\n     * Promise yielding `true` / `false` which allows for asynchronous abort (e.g. first show user a confirmation dialog).\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {GridBase} params.event.source\n     * @param {object} params.event.context\n     * @param {boolean} params.event.context.valid Set this to true or false to indicate whether the drop position is valid\n     * @param {Model} params.event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)\n     * @param {Model} params.event.context.parent The parent record of the current drop position (only applicable for trees)\n     * @param {Model[]} params.event.context.records The dragged row records\n     * @param {RecordPositionContext[]} params.event.context.oldPositionContext An array of objects with information about the previous tree position. Objects contain the `record`, and its original `parentIndex` and `parentId` values\n     * @param {MouseEvent} params.event.event\n     */\n    (e: 'gridRowBeforeDropFinalize', params: ((event: { source: GridBase, context: { valid: boolean, insertBefore: Model, parent: Model, records: Model[], oldPositionContext: RecordPositionContext[] }, event: MouseEvent }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * Fired while the row is being dragged, in the listener function you have access to `context.insertBefore` a grid /\n     * tree record, and additionally `context.parent` (a TreeNode) for trees. You can signal that the drop position is\n     * valid or invalid by setting `context.valid = false;`\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {GridBase} params.event.source\n     * @param {object} params.event.context\n     * @param {boolean} params.event.context.valid Set this to true or false to indicate whether the drop position is valid.\n     * @param {Model} params.event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)\n     * @param {Model} params.event.context.parent The parent record of the current drop position (only applicable for trees)\n     * @param {Model[]} params.event.context.records The dragged row records\n     * @param {MouseEvent} params.event.event\n     */\n    (e: 'gridRowDrag', params: ((event: { source: GridBase, context: { valid: boolean, insertBefore: Model, parent: Model, records: Model[] }, event: MouseEvent }) => void)|string): void\n    /**\n     * Fired when a row drag operation is aborted\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {GridBase} params.event.source\n     * @param {object} params.event.context\n     * @param {Model[]} params.event.context.records The dragged row records\n     * @param {MouseEvent} params.event.event\n     */\n    (e: 'gridRowDragAbort', params: ((event: { source: GridBase, context: { records: Model[] }, event: MouseEvent }) => void)|string): void\n    /**\n     * Fired when dragging starts.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {GridBase} params.event.source\n     * @param {object} params.event.context\n     * @param {Model[]} params.event.context.records The dragged row records\n     * @param {MouseEvent|TouchEvent} params.event.event\n     */\n    (e: 'gridRowDragStart', params: ((event: { source: GridBase, context: { records: Model[] }, event: MouseEvent|TouchEvent }) => void)|string): void\n    /**\n     * Fired after the row drop operation has completed, regardless of validity\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {GridBase} params.event.source\n     * @param {object} params.event.context\n     * @param {boolean} params.event.context.valid true or false depending on whether the drop position was valid\n     * @param {Model} params.event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)\n     * @param {Model} params.event.context.parent The parent record of the current drop position (only applicable for trees)\n     * @param {Model[]} params.event.context.records The dragged row records\n     * @param {RecordPositionContext[]} params.event.context.oldPositionContext An array of objects with information about the previous tree position. Objects contain the record, and its original `parentIndex` and `parentId` values\n     * @param {MouseEvent} params.event.event\n     */\n    (e: 'gridRowDrop', params: ((event: { source: GridBase, context: { valid: boolean, insertBefore: Model, parent: Model, records: Model[], oldPositionContext: RecordPositionContext[] }, event: MouseEvent }) => void)|string): void\n    /**\n     * Fired when a grid header is clicked on.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-headerClick)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Event} params.event.domEvent The triggering DOM event.\n     * @param {Column} params.event.column The column clicked on.\n     */\n    (e: 'headerClick', params: ((event: { domEvent: Event, column: Column }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * This event fires on the owning Grid before the context menu is shown for a header.\n     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/schedulerpro/docs/api/Grid/feature/HeaderMenu#config-processItems).\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-headerMenuBeforeShow)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source The grid\n     * @param {Menu} params.event.menu The menu\n     * @param {Record<string, MenuItemConfig>} params.event.items Menu item configs\n     * @param {Column} params.event.column Column\n     */\n    (e: 'headerMenuBeforeShow', params: ((event: { source: Grid, menu: Menu, items: Record<string, MenuItemConfig>, column: Column }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * This event fires on the owning Grid when an item is selected in the header context menu.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source The grid\n     * @param {Menu} params.event.menu The menu\n     * @param {MenuItem} params.event.item Selected menu item\n     * @param {Column} params.event.column Column\n     */\n    (e: 'headerMenuItem', params: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column }) => void)|string): void\n    /**\n     * This event fires on the owning Grid after the context menu is shown for a header\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source The grid\n     * @param {Menu} params.event.menu The menu\n     * @param {Record<string, MenuItemConfig>} params.event.items Menu item configs\n     * @param {Column} params.event.column Column\n     */\n    (e: 'headerMenuShow', params: ((event: { source: Grid, menu: Menu, items: Record<string, MenuItemConfig>, column: Column }) => void)|string): void\n    /**\n     * This event fires on the owning Grid when a check item is toggled in the header context menu.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source The grid\n     * @param {Menu} params.event.menu The menu\n     * @param {MenuItem} params.event.item Selected menu item\n     * @param {Column} params.event.column Column\n     * @param {boolean} params.event.checked Checked or not\n     */\n    (e: 'headerMenuToggleItem', params: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, checked: boolean }) => void)|string): void\n    /**\n     * Triggered after a widget was hidden\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Widget} params.event.source The widget\n     */\n    (e: 'hide', params: ((event: { source: Widget }) => void)|string): void\n    /**\n     * Fires when row locking is enabled.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {GridBase} params.event.clone The created clone\n     */\n    (e: 'lockRows', params: ((event: { clone: GridBase }) => void)|string): void\n    /**\n     * Mouse moved out from element in grid\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {MouseEvent} params.event.event The native browser event\n     */\n    (e: 'mouseOut', params: ((event: { event: MouseEvent }) => void)|string): void\n    /**\n     * Mouse moved in over element in grid\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {MouseEvent} params.event.event The native browser event\n     */\n    (e: 'mouseOver', params: ((event: { event: MouseEvent }) => void)|string): void\n    /**\n     * Fired when a user gesture causes the active item to change.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Event} params.event.event The browser event which instigated navigation. May be a click or key or focus event.\n     * @param {HTMLElement|null} params.event.item The newly active item, or `null` if focus moved out.\n     * @param {HTMLElement|null} params.event.oldItem The previously active item, or `null` if focus is moving in.\n     */\n    (e: 'navigate', params: ((event: { event: Event, item: HTMLElement|null, oldItem: HTMLElement|null }) => void)|string): void\n    /**\n     * Triggered when a widget which had been in a non-visible state for any reason\n     * achieves visibility.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-paint)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Widget} params.event.source The widget being painted.\n     * @param {boolean} params.event.firstPaint `true` if this is the first paint.\n     */\n    (e: 'paint', params: ((event: { source: Widget, firstPaint: boolean }) => void)|string): void\n    /**\n     * Fires on the owning Grid after a paste action is performed.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source Owner grid\n     * @param {string} params.event.clipboardData The clipboardData that was pasted\n     * @param {Model[]} params.event.modifiedRecords The records which have been modified due to the paste action\n     * @param {GridLocation} params.event.targetCell The cell from which the paste will be started\n     * @param {string} params.event.entityName 'cell' to distinguish this event from other paste events\n     */\n    (e: 'paste', params: ((event: { source: Grid, clipboardData: string, modifiedRecords: Model[], targetCell: GridLocation, entityName: string }) => void)|string): void\n    /**\n     * Fires on the owning Scheduler if a paste action is not allowed. Depending on if the EventStore is using\n     * [singleAssignment](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/data/EventStore#config-singleAssignment) or the configuration of\n     * [copyPasteAction](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/EventCopyPaste#config-copyPasteAction), either the `eventRecords` or the `assignmentRecords` param will be populated\n     * with record copies.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source Owner scheduler\n     * @param {SchedulerEventModel[]} params.event.eventRecords The event records about to be pasted\n     * @param {SchedulerAssignmentModel[]} params.event.assignmentRecords The assignment records about to be pasted\n     * @param {SchedulerEventModel[]} params.event.originalEventRecords The event records that were copied\n     * @param {SchedulerAssignmentModel[]} params.event.originalAssignmentRecords The assignment records that were copied\n     * @param {Date} params.event.date The paste date\n     * @param {SchedulerResourceModel} params.event.resourceRecord The target resource record\n     * @param {boolean} params.event.isCut `true` if this is a cut action\n     * @param {string} params.event.entityName 'event' to distinguish this event from other `pasteNotAllowed` events\n     * @param {'overlappingEvents'|'resourceReadOnly'} params.event.reason A string id to use for displaying an error message to the user.\n     */\n    (e: 'pasteNotAllowed', params: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], assignmentRecords: SchedulerAssignmentModel[], originalEventRecords: SchedulerEventModel[], originalAssignmentRecords: SchedulerAssignmentModel[], date: Date, resourceRecord: SchedulerResourceModel, isCut: boolean, entityName: string, reason: 'overlappingEvents'|'resourceReadOnly' }) => void)|string): void\n    /**\n     * Fires on the owning Grid when export has finished\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {any} params.event.response Optional response, if received\n     * @param {Error} params.event.error Optional error, if exception occurred\n     */\n    (e: 'pdfExport', params: ((event: { response?: any, error?: Error }) => void)|string): void\n    /**\n     * Fired after the [viewPreset](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineViewPresets#config-viewPreset) has changed.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source This Scheduler instance.\n     * @param {Date} params.event.startDate The new start date of the timeline.\n     * @param {Date} params.event.centerDate The new center date of the timeline.\n     * @param {Date} params.event.endDate The new end date of the timeline.\n     * @param {ViewPreset} params.event.from The outgoing ViewPreset.\n     * @param {ViewPreset} params.event.to The ViewPreset being switched to.\n     */\n    (e: 'presetChange', params: ((event: { source: Scheduler, startDate: Date, centerDate: Date, endDate: Date, from: ViewPreset, to: ViewPreset }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call\n     * to [recompose](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.\n     */\n    (e: 'recompose', params: (() => void)|string): void\n    /**\n     * Fired after releasing an event, useful to cleanup of custom content added on `renderEvent` or in `eventRenderer`.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source This Scheduler\n     * @param {SchedulerEventModel} params.event.eventRecord The event record\n     * @param {SchedulerResourceModel} params.event.resourceRecord The resource record\n     * @param {SchedulerAssignmentModel} params.event.assignmentRecord The assignment record\n     * @param {object} params.event.renderData An object containing details about the event rendering\n     * @param {HTMLElement} params.event.element The event bar element\n     */\n    (e: 'releaseEvent', params: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, assignmentRecord: SchedulerAssignmentModel, renderData: object, element: HTMLElement }) => void)|string): void\n    /**\n     * Fired after rendering an event, when its element is available in DOM.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source This Scheduler\n     * @param {SchedulerEventModel} params.event.eventRecord The event record\n     * @param {SchedulerResourceModel} params.event.resourceRecord The resource record\n     * @param {SchedulerAssignmentModel} params.event.assignmentRecord The assignment record\n     * @param {object} params.event.renderData An object containing details about the event rendering, see [eventRenderer](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-eventRenderer) for details\n     * @param {boolean} params.event.isRepaint `true` if this render is a repaint of the event, updating its existing element\n     * @param {boolean} params.event.isReusingElement `true` if this render lead to the event reusing a released events element\n     * @param {HTMLElement} params.event.element The event bar element\n     */\n    (e: 'renderEvent', params: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, assignmentRecord: SchedulerAssignmentModel, renderData: object, isRepaint: boolean, isReusingElement: boolean, element: HTMLElement }) => void)|string): void\n    /**\n     * Fires after a row is rendered.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source The firing Grid instance.\n     * @param {Row} params.event.row The row that has been rendered.\n     * @param {Model} params.event.record The record for the row.\n     * @param {number} params.event.recordIndex The zero-based index of the record.\n     */\n    (e: 'renderRow', params: ((event: { source: Grid, row: Row, record: Model, recordIndex: number }) => void)|string): void\n    /**\n     * Grid rows have been rendered\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source This grid.\n     */\n    (e: 'renderRows', params: ((event: { source: Grid }) => void)|string): void\n    /**\n     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Widget} params.event.source This Widget\n     * @param {number} params.event.width The new width\n     * @param {number} params.event.height The new height\n     * @param {number} params.event.oldWidth The old width\n     * @param {number} params.event.oldHeight The old height\n     */\n    (e: 'resize', params: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string): void\n    /**\n     * Fired when clicking a resource header cell\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source This Scheduler\n     * @param {SchedulerResourceModel} params.event.resourceRecord The resource record\n     * @param {Event} params.event.event The event\n     */\n    (e: 'resourceHeaderClick', params: ((event: { source: Scheduler, resourceRecord: SchedulerResourceModel, event: Event }) => void)|string): void\n    /**\n     * Fired when activating context menu on a resource header cell\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source This Scheduler\n     * @param {SchedulerResourceModel} params.event.resourceRecord The resource record\n     * @param {Event} params.event.event The event\n     */\n    (e: 'resourceHeaderContextmenu', params: ((event: { source: Scheduler, resourceRecord: SchedulerResourceModel, event: Event }) => void)|string): void\n    /**\n     * Fired when double clicking a resource header cell\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source This Scheduler\n     * @param {SchedulerResourceModel} params.event.resourceRecord The resource record\n     * @param {Event} params.event.event The event\n     */\n    (e: 'resourceHeaderDblclick', params: ((event: { source: Scheduler, resourceRecord: SchedulerResourceModel, event: Event }) => void)|string): void\n    /**\n     * This event fires on the owning scheduler before the context menu is shown for a resource.\n     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/ResourceMenu#config-processItems).\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-resourceMenuBeforeShow)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source The grid\n     * @param {Menu} params.event.menu The menu\n     * @param {Record<string, MenuItemConfig>} params.event.items Menu item configs\n     * @param {Column} params.event.column Column\n     * @param {SchedulerResourceModel} params.event.resourceRecord Record\n     */\n    (e: 'resourceMenuBeforeShow', params: ((event: { source: Scheduler, menu: Menu, items: Record<string, MenuItemConfig>, column: Column, resourceRecord: SchedulerResourceModel }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * This event fires on the owning scheduler when an item is selected in the context menu.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source The grid\n     * @param {Menu} params.event.menu The menu\n     * @param {MenuItem} params.event.item Selected menu item\n     * @param {SchedulerResourceModel} params.event.record Record\n     */\n    (e: 'resourceMenuItem', params: ((event: { source: Scheduler, menu: Menu, item: MenuItem, record: SchedulerResourceModel }) => void)|string): void\n    /**\n     * This event fires on the owning scheduler after the context menu is shown for a resource.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source The grid\n     * @param {Menu} params.event.menu The menu\n     * @param {Record<string, MenuItemConfig>} params.event.items Menu item configs\n     * @param {SchedulerResourceModel} params.event.record Record\n     */\n    (e: 'resourceMenuShow', params: ((event: { source: Scheduler, menu: Menu, items: Record<string, MenuItemConfig>, record: SchedulerResourceModel }) => void)|string): void\n    /**\n     * This event fires on the owning grid when a check item is toggled in the context menu.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source The grid\n     * @param {Menu} params.event.menu The menu\n     * @param {MenuItem} params.event.item Selected menu item\n     * @param {SchedulerResourceModel} params.event.resourceRecord Record\n     * @param {boolean} params.event.checked Checked or not\n     */\n    (e: 'resourceMenuToggleItem', params: ((event: { source: Scheduler, menu: Menu, item: MenuItem, resourceRecord: SchedulerResourceModel, checked: boolean }) => void)|string): void\n    /**\n     * Triggered for click on a resource time range. Only triggered if the ResourceTimeRange feature is configured with\n     * `enableMouseEvents: true`.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source This Scheduler\n     * @param {ResourceTimeRanges} params.event.feature The ResourceTimeRange feature\n     * @param {ResourceTimeRangeModel} params.event.resourceTimeRangeRecord Resource time range record\n     * @param {SchedulerResourceModel} params.event.resourceRecord Resource record\n     * @param {MouseEvent} params.event.domEvent Browser event\n     */\n    (e: 'resourceTimeRangeClick', params: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string): void\n    /**\n     * Triggered for right-click on a resource time range. Only triggered if the ResourceTimeRange feature is configured\n     * with `enableMouseEvents: true`.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source This Scheduler\n     * @param {ResourceTimeRanges} params.event.feature The ResourceTimeRange feature\n     * @param {ResourceTimeRangeModel} params.event.resourceTimeRangeRecord Resource time range record\n     * @param {SchedulerResourceModel} params.event.resourceRecord Resource record\n     * @param {MouseEvent} params.event.domEvent Browser event\n     */\n    (e: 'resourceTimeRangeContextMenu', params: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string): void\n    /**\n     * Triggered for double-click on a resource time range. Only triggered if the ResourceTimeRange feature is configured\n     * with `enableMouseEvents: true`.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source This Scheduler\n     * @param {ResourceTimeRanges} params.event.feature The ResourceTimeRange feature\n     * @param {ResourceTimeRangeModel} params.event.resourceTimeRangeRecord Resource time range record\n     * @param {SchedulerResourceModel} params.event.resourceRecord Resource record\n     * @param {MouseEvent} params.event.domEvent Browser event\n     */\n    (e: 'resourceTimeRangeDblClick', params: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string): void\n    /**\n     * Triggered for mouse down ona resource time range. Only triggered if the ResourceTimeRange feature is configured\n     * with `enableMouseEvents: true`.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source This Scheduler\n     * @param {ResourceTimeRanges} params.event.feature The ResourceTimeRange feature\n     * @param {ResourceTimeRangeModel} params.event.resourceTimeRangeRecord Resource time range record\n     * @param {SchedulerResourceModel} params.event.resourceRecord Resource record\n     * @param {MouseEvent} params.event.domEvent Browser event\n     */\n    (e: 'resourceTimeRangeMouseDown', params: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string): void\n    /**\n     * Triggered for mouse out of a resource time range. Only triggered if the ResourceTimeRange feature is configured\n     * with `enableMouseEvents: true`.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source This Scheduler\n     * @param {ResourceTimeRanges} params.event.feature The ResourceTimeRange feature\n     * @param {ResourceTimeRangeModel} params.event.resourceTimeRangeRecord Resource time range record\n     * @param {SchedulerResourceModel} params.event.resourceRecord Resource record\n     * @param {MouseEvent} params.event.domEvent Browser event\n     */\n    (e: 'resourceTimeRangeMouseOut', params: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string): void\n    /**\n     * Triggered for mouse over on a resource time range. Only triggered if the ResourceTimeRange feature is configured\n     * with `enableMouseEvents: true`.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source This Scheduler\n     * @param {ResourceTimeRanges} params.event.feature The ResourceTimeRange feature\n     * @param {ResourceTimeRangeModel} params.event.resourceTimeRangeRecord Resource time range record\n     * @param {SchedulerResourceModel} params.event.resourceRecord Resource record\n     * @param {MouseEvent} params.event.domEvent Browser event\n     */\n    (e: 'resourceTimeRangeMouseOver', params: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string): void\n    /**\n     * Triggered for mouse up ona resource time range. Only triggered if the ResourceTimeRange feature is configured\n     * with `enableMouseEvents: true`.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source This Scheduler\n     * @param {ResourceTimeRanges} params.event.feature The ResourceTimeRange feature\n     * @param {ResourceTimeRangeModel} params.event.resourceTimeRangeRecord Resource time range record\n     * @param {SchedulerResourceModel} params.event.resourceRecord Resource record\n     * @param {MouseEvent} params.event.domEvent Browser event\n     */\n    (e: 'resourceTimeRangeMouseUp', params: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: SchedulerResourceModel, domEvent: MouseEvent }) => void)|string): void\n    /**\n     * Grid resize lead to a new responsive level being applied\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.grid Grid that was resized\n     * @param {string} params.event.level New responsive level (small, large, etc)\n     * @param {number} params.event.width New width in px\n     * @param {string} params.event.oldLevel Old responsive level\n     * @param {number} params.event.oldWidth Old width in px\n     */\n    (e: 'responsive', params: ((event: { grid: Grid, level: string, width: number, oldLevel: string, oldWidth: number }) => void)|string): void\n    /**\n     * This event fires when a row has finished collapsing.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Model} params.event.record Record\n     */\n    (e: 'rowCollapse', params: ((event: { record: Model }) => void)|string): void\n    /**\n     * This event fires when a row expand has finished expanding.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-rowExpand)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Model} params.event.record Record\n     * @param {object} params.event.expandedElements An object with the Grid region name as property and the expanded body element as value\n     * @param {Widget} params.event.widget In case of expanding a Widget, this will be a reference to the instance created by the actual expansion. If there is multiple Grid regions, use the `widgets` param instead.\n     * @param {object} params.event.widgets In case of expanding a Widget, this will be an object with the Grid region name as property and the reference to the widget instance created by the actual expansion\n     */\n    (e: 'rowExpand', params: ((event: { record: Model, expandedElements: object, widget: Widget, widgets: object }) => void)|string): void\n    /**\n     * Fired when the mouse enters a row\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source The grid instance\n     * @param {Model} params.event.record The record representing the hovered row\n     * @param {Column} params.event.column The column currently hovered\n     * @param {HTMLElement} params.event.cellElement The cell HTML element\n     * @param {MouseEvent} params.event.event The native DOM event\n     */\n    (e: 'rowMouseEnter', params: ((event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void)|string): void\n    /**\n     * Fired when the mouse leaves a row\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source The grid instance\n     * @param {Model} params.event.record The record representing the row that the mouse left\n     * @param {HTMLElement} params.event.cellElement The cell HTML element that the mouse left\n     * @param {MouseEvent} params.event.event The native DOM event\n     */\n    (e: 'rowMouseLeave', params: ((event: { source: Grid, record: Model, cellElement: HTMLElement, event: MouseEvent }) => void)|string): void\n    /**\n     * Triggered when user clicks an empty area in the schedule.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source This Scheduler\n     * @param {Date} params.event.date Date at mouse position\n     * @param {TimeSpan} params.event.tick A record which encapsulates the time axis tick clicked on.\n     * @param {number} params.event.tickIndex The index of the time axis tick clicked on.\n     * @param {Date} params.event.tickStartDate The start date of the current time axis tick\n     * @param {Date} params.event.tickEndDate The end date of the current time axis tick\n     * @param {Row} params.event.row Row under the mouse (in horizontal mode only)\n     * @param {number} params.event.index Resource index\n     * @param {SchedulerResourceModel} params.event.resourceRecord Resource record\n     * @param {MouseEvent} params.event.event Browser event\n     */\n    (e: 'scheduleClick', params: ((event: { source: Scheduler, date: Date, tick: TimeSpan, tickIndex: number, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string): void\n    /**\n     * Triggered when user right-clicks an empty area in the schedule.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source This Scheduler\n     * @param {Date} params.event.date Date at mouse position\n     * @param {TimeSpan} params.event.tick A record which encapsulates the time axis tick clicked on.\n     * @param {number} params.event.tickIndex The index of the time axis tick clicked on.\n     * @param {Date} params.event.tickStartDate The start date of the current time axis tick\n     * @param {Date} params.event.tickEndDate The end date of the current time axis tick\n     * @param {Row} params.event.row Row under the mouse (in horizontal mode only)\n     * @param {number} params.event.index Resource index\n     * @param {SchedulerResourceModel} params.event.resourceRecord Resource record\n     * @param {MouseEvent} params.event.event Browser event\n     */\n    (e: 'scheduleContextMenu', params: ((event: { source: Scheduler, date: Date, tick: TimeSpan, tickIndex: number, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string): void\n    /**\n     * Triggered when user double-clicks an empty area in the schedule.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source This Scheduler\n     * @param {Date} params.event.date Date at mouse position\n     * @param {TimeSpan} params.event.tick A record which encapsulates the time axis tick clicked on.\n     * @param {number} params.event.tickIndex The index of the time axis tick clicked on.\n     * @param {Date} params.event.tickStartDate The start date of the current time axis tick\n     * @param {Date} params.event.tickEndDate The end date of the current time axis tick\n     * @param {Row} params.event.row Row under the mouse (in horizontal mode only)\n     * @param {number} params.event.index Index of double-clicked resource\n     * @param {SchedulerResourceModel} params.event.resourceRecord Resource record\n     * @param {MouseEvent} params.event.event Browser event\n     */\n    (e: 'scheduleDblClick', params: ((event: { source: Scheduler, date: Date, tick: TimeSpan, tickIndex: number, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string): void\n    /**\n     * This event fires on the owning Scheduler or Gantt widget before the context menu is shown for the schedule.\n     * Allows manipulation of the items to show in the same way as in `processItems`. Returning `false` from a listener\n     * prevents the menu from being shown.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source\n     * @param {Record<string, MenuItemConfig>} params.event.items Menu item configs\n     * @param {SchedulerEventModel} params.event.eventRecord Event record for which the menu was triggered\n     * @param {SchedulerResourceModel} params.event.resourceRecord Resource record\n     * @param {Date} params.event.date Clicked date, rounded according to viewPreset's settings\n     * @param {SchedulerAssignmentModel} params.event.assignmentRecord Assignment record, if assignments are used\n     * @param {HTMLElement} params.event.eventElement\n     */\n    (e: 'scheduleMenuBeforeShow', params: ((event: { source: Scheduler, items: Record<string, MenuItemConfig>, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, date: Date, assignmentRecord: SchedulerAssignmentModel, eventElement: HTMLElement }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * This event fires on the owning Scheduler or Gantt widget when an item is selected in the context menu.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source\n     * @param {MenuItem} params.event.item\n     * @param {SchedulerResourceModel} params.event.resourceRecord\n     * @param {Date} params.event.date Clicked date, rounded according to viewPreset's settings\n     * @param {HTMLElement} params.event.element\n     */\n    (e: 'scheduleMenuItem', params: ((event: { source: Scheduler, item: MenuItem, resourceRecord: SchedulerResourceModel, date: Date, element: HTMLElement }) => void)|string): void\n    /**\n     * This event fires on the owning Scheduler or Gantt widget after showing the context menu for the schedule.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source\n     * @param {Record<string, MenuItemConfig>} params.event.items Menu item configs\n     * @param {Menu} params.event.menu The menu\n     * @param {SchedulerResourceModel} params.event.resourceRecord\n     * @param {Date} params.event.date Clicked date, rounded according to viewPreset's settings\n     * @param {HTMLElement} params.event.targetElement\n     */\n    (e: 'scheduleMenuShow', params: ((event: { source: Scheduler, items: Record<string, MenuItemConfig>, menu: Menu, resourceRecord: SchedulerResourceModel, date: Date, targetElement: HTMLElement }) => void)|string): void\n    /**\n     * Triggered when user mousedowns over an empty area in the schedule.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source This Scheduler\n     * @param {Date} params.event.date Date at mouse position\n     * @param {Date} params.event.tickStartDate The start date of the current time axis tick\n     * @param {Date} params.event.tickEndDate The end date of the current time axis tick\n     * @param {Row} params.event.row Row under the mouse (in horizontal mode only)\n     * @param {number} params.event.index Resource index\n     * @param {SchedulerResourceModel} params.event.resourceRecord Resource record\n     * @param {MouseEvent} params.event.event Browser event\n     */\n    (e: 'scheduleMouseDown', params: ((event: { source: Scheduler, date: Date, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string): void\n    /**\n     * Triggered when mouse enters an empty area in the schedule.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source This Scheduler\n     * @param {Date} params.event.date Date at mouse position\n     * @param {Date} params.event.tickStartDate The start date of the current time axis tick\n     * @param {Date} params.event.tickEndDate The end date of the current time axis tick\n     * @param {Row} params.event.row Row under the mouse (in horizontal mode only)\n     * @param {number} params.event.index Resource index\n     * @param {SchedulerResourceModel} params.event.resourceRecord Resource record\n     * @param {MouseEvent} params.event.event Browser event\n     */\n    (e: 'scheduleMouseEnter', params: ((event: { source: Scheduler, date: Date, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string): void\n    /**\n     * Triggered when mouse leaves an empty area in the schedule.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source This Scheduler\n     * @param {MouseEvent} params.event.event Browser event\n     */\n    (e: 'scheduleMouseLeave', params: ((event: { source: Scheduler, event: MouseEvent }) => void)|string): void\n    /**\n     * Triggered when user moves mouse over an empty area in the schedule.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source This Scheduler\n     * @param {Date} params.event.date Date at mouse position\n     * @param {TimeSpan} params.event.tick A record which encapsulates the time axis tick clicked on.\n     * @param {number} params.event.tickIndex The index of the time axis tick clicked on.\n     * @param {Date} params.event.tickStartDate The start date of the current time axis tick\n     * @param {Date} params.event.tickEndDate The end date of the current time axis tick\n     * @param {Row} params.event.row Row under the mouse (in horizontal mode only)\n     * @param {number} params.event.index Resource index\n     * @param {SchedulerResourceModel} params.event.resourceRecord Resource record\n     * @param {MouseEvent} params.event.event Browser event\n     */\n    (e: 'scheduleMouseMove', params: ((event: { source: Scheduler, date: Date, tick: TimeSpan, tickIndex: number, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string): void\n    /**\n     * Triggered when user mouseups over an empty area in the schedule.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source This Scheduler\n     * @param {Date} params.event.date Date at mouse position\n     * @param {Date} params.event.tickStartDate The start date of the current time axis tick\n     * @param {Date} params.event.tickEndDate The end date of the current time axis tick\n     * @param {Row} params.event.row Row under the mouse (in horizontal mode only)\n     * @param {number} params.event.index Resource index\n     * @param {SchedulerResourceModel} params.event.resourceRecord Resource record\n     * @param {MouseEvent} params.event.event Browser event\n     */\n    (e: 'scheduleMouseUp', params: ((event: { source: Scheduler, date: Date, tickStartDate: Date, tickEndDate: Date, row: Row, index: number, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string): void\n    /**\n     * Grid has scrolled vertically\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source The firing Grid instance.\n     * @param {number} params.event.scrollTop The vertical scroll position.\n     */\n    (e: 'scroll', params: ((event: { source: Grid, scrollTop: number }) => void)|string): void\n    /**\n     * Fires on owner when the scroll button is clicked, return `false` to prevent default scroll behavior\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Event} params.event.domEvent DOM event\n     */\n    (e: 'scrollButtonClick', params: ((event: { domEvent: Event }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * The selection has been changed.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {'select'|'deselect'} params.event.action `'select'`/`'deselect'`\n     * @param {'row'|'cell'} params.event.mode `'row'`/`'cell'`\n     * @param {Grid} params.event.source\n     * @param {Model[]} params.event.deselected The records deselected in this operation.\n     * @param {Model[]} params.event.selected The records selected in this operation.\n     * @param {Model[]} params.event.selection The records in the new selection.\n     * @param {GridLocation[]} params.event.deselectedCells The cells deselected in this operation.\n     * @param {GridLocation[]} params.event.selectedCells The cells selected in this operation.\n     * @param {GridLocation[]} params.event.cellSelection The cells in the new selection.\n     */\n    (e: 'selectionChange', params: ((event: { action: 'select'|'deselect', mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: GridLocation[], selectedCells: GridLocation[], cellSelection: GridLocation[] }) => void)|string): void\n    /**\n     * The selectionMode configuration has been changed.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {object} params.event.selectionMode The new [selectionMode](https://bryntum.com/products/schedulerpro/docs/api/Grid/view/mixin/GridSelection#config-selectionMode)\n     */\n    (e: 'selectionModeChange', params: ((event: { selectionMode: object }) => void)|string): void\n    /**\n     * Triggered after a widget is shown.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Widget} params.event.source The widget\n     */\n    (e: 'show', params: ((event: { source: Widget }) => void)|string): void\n    /**\n     * Fires when splitting the Grid.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {GridBase[]} params.event.subViews The sub views created by the split\n     * @param {object} params.event.options The options passed to the split call\n     * @param {'horizontal'|'vertical'|'both'} params.event.options.direction The direction of the split\n     * @param {Column} params.event.options.atColumn The column to split at\n     * @param {Model} params.event.options.atRecord The record to split at\n     */\n    (e: 'split', params: ((event: { subViews: GridBase[], options: { direction: 'horizontal'|'vertical'|'both', atColumn: Column, atRecord: Model } }) => void)|string): void\n    /**\n     * Fired by the Grid when the collapse icon is clicked. Return `false` to prevent the default collapse action,\n     * if you want to implement your own behavior.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source The Grid instance.\n     * @param {SubGrid} params.event.subGrid The subgrid\n     * @param {Event} params.event.domEvent The native DOM event\n     */\n    (e: 'splitterCollapseClick', params: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * Fired by the Grid after a sub-grid has been resized using the splitter\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source The Grid instance.\n     * @param {SubGrid} params.event.subGrid The resized subgrid\n     * @param {Event} params.event.domEvent The native DOM event\n     */\n    (e: 'splitterDragEnd', params: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => void)|string): void\n    /**\n     * Fired by the Grid when a sub-grid resize gesture starts\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source The Grid instance.\n     * @param {SubGrid} params.event.subGrid The subgrid about to be resized\n     * @param {Event} params.event.domEvent The native DOM event\n     */\n    (e: 'splitterDragStart', params: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => void)|string): void\n    /**\n     * Fired by the Grid when the expand icon is clicked. Return `false` to prevent the default expand action,\n     * if you want to implement your own behavior.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source The Grid instance.\n     * @param {SubGrid} params.event.subGrid The subgrid\n     * @param {Event} params.event.domEvent The native DOM event\n     */\n    (e: 'splitterExpandClick', params: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * Fires on the owning Grid when editing starts\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source Owner grid\n     * @param {GridLocation} params.event.editorContext Editing context\n     * @param {Editor} params.event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.\n     * @param {Column} params.event.editorContext.column Target column\n     * @param {Model} params.event.editorContext.record Target record\n     * @param {HTMLElement} params.event.editorContext.cell Target cell\n     * @param {any} params.event.editorContext.value Cell value\n     */\n    (e: 'startCellEdit', params: ((event: { source: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any } }) => void)|string): void\n    /**\n     * Fires after a sub grid is collapsed.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source The firing Grid instance\n     * @param {SubGrid} params.event.subGrid The sub grid instance\n     */\n    (e: 'subGridCollapse', params: ((event: { source: Grid, subGrid: SubGrid }) => void)|string): void\n    /**\n     * Fires after a sub grid is expanded.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid} params.event.source The firing Grid instance\n     * @param {SubGrid} params.event.subGrid The sub grid instance\n     */\n    (e: 'subGridExpand', params: ((event: { source: Grid, subGrid: SubGrid }) => void)|string): void\n    /**\n     * Fired when the timeaxis has changed, for example by zooming or configuring a new time span.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source This Scheduler\n     * @param {object} params.event.config Config object used to reconfigure the time axis.\n     * @param {Date} params.event.config.startDate New start date (if supplied)\n     * @param {Date} params.event.config.endDate New end date (if supplied)\n     */\n    (e: 'timeAxisChange', params: ((event: { source: Scheduler, config: { startDate: Date, endDate: Date } }) => void)|string): void\n    /**\n     * Fires after a click on a time axis cell\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {TimeAxisColumn|VerticalTimeAxisColumn} params.event.source The column object\n     * @param {Date} params.event.startDate The start date of the header cell\n     * @param {Date} params.event.endDate The end date of the header cell\n     * @param {Event} params.event.event The event object\n     */\n    (e: 'timeAxisHeaderClick', params: ((event: { source: TimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string): void\n    /**\n     * Fires after a right click on a time axis cell\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {TimeAxisColumn|VerticalTimeAxisColumn} params.event.source The column object\n     * @param {Date} params.event.startDate The start date of the header cell\n     * @param {Date} params.event.endDate The end date of the header cell\n     * @param {Event} params.event.event The event object\n     */\n    (e: 'timeAxisHeaderContextMenu', params: ((event: { source: TimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string): void\n    /**\n     * Fires after a double click on a time axis cell\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {TimeAxisColumn|VerticalTimeAxisColumn} params.event.source The column object\n     * @param {Date} params.event.startDate The start date of the header cell\n     * @param {Date} params.event.endDate The end date of the header cell\n     * @param {Event} params.event.event The event object\n     */\n    (e: 'timeAxisHeaderDblClick', params: ((event: { source: TimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string): void\n    /**\n     * This event fires on the owning Scheduler or Gantt widget before the context menu is shown for the time axis header.\n     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/feature/TimeAxisHeaderMenu#config-processItems).\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-timeAxisHeaderMenuBeforeShow)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source The scheduler\n     * @param {Menu} params.event.menu The menu\n     * @param {Record<string, MenuItemConfig>} params.event.items Menu item configs\n     * @param {Column} params.event.column Time axis column\n     */\n    (e: 'timeAxisHeaderMenuBeforeShow', params: ((event: { source: Scheduler, menu: Menu, items: Record<string, MenuItemConfig>, column: Column }) => Promise<boolean>|boolean|void)|string): void\n    /**\n     * This event fires on the owning Scheduler or Gantt widget when an item is selected in the header context menu.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source The scheduler\n     * @param {Menu} params.event.menu The menu\n     * @param {MenuItem} params.event.item Selected menu item\n     * @param {Column} params.event.column Time axis column\n     */\n    (e: 'timeAxisHeaderMenuItem', params: ((event: { source: Scheduler, menu: Menu, item: MenuItem, column: Column }) => void)|string): void\n    /**\n     * This event fires on the owning Scheduler or Gantt widget after the context menu is shown for a header\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source The scheduler\n     * @param {Menu} params.event.menu The menu\n     * @param {Record<string, MenuItemConfig>} params.event.items Menu item configs\n     * @param {Column} params.event.column Time axis column\n     */\n    (e: 'timeAxisHeaderMenuShow', params: ((event: { source: Scheduler, menu: Menu, items: Record<string, MenuItemConfig>, column: Column }) => void)|string): void\n    /**\n     * Fired when the pointer-activated [timelineContext](https://bryntum.com/products/schedulerpro/docs/api/Scheduler/view/mixin/TimelineDomEvents#property-timelineContext) has changed.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {TimelineContext} params.event.oldContext The tick/resource context being deactivated.\n     * @param {TimelineContext} params.event.context The tick/resource context being activated.\n     */\n    (e: 'timelineContextChange', params: ((event: { oldContext: TimelineContext, context: TimelineContext }) => void)|string): void\n    /**\n     * Fired when the *scheduler* viewport (not the overall Scheduler element) changes size.\n     * This happens when the grid changes height, or when the subgrid which encapsulates the\n     * scheduler column changes width.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Widget} params.event.source This Scheduler\n     * @param {number} params.event.width The new width\n     * @param {number} params.event.height The new height\n     * @param {number} params.event.oldWidth The old width\n     * @param {number} params.event.oldHeight The old height\n     */\n    (e: 'timelineViewportResize', params: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string): void\n    /**\n     * Fired on the owning Scheduler or Gantt widget when a click happens on a time range header element\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source Scheduler instance\n     * @param {TimeSpan} params.event.timeRangeRecord The record\n     * @param {MouseEvent} params.event.domEvent Browser event\n     */\n    (e: 'timeRangeHeaderClick', params: ((event: { source: Scheduler, timeRangeRecord: TimeSpan, domEvent: MouseEvent }) => void)|string): void\n    /**\n     * Fired on the owning Scheduler or Gantt widget when a right click happens on a time range header element\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source Scheduler instance\n     * @param {TimeSpan} params.event.timeRangeRecord The record\n     * @param {MouseEvent} params.event.domEvent Browser event\n     */\n    (e: 'timeRangeHeaderContextMenu', params: ((event: { source: Scheduler, timeRangeRecord: TimeSpan, domEvent: MouseEvent }) => void)|string): void\n    /**\n     * Fired on the owning Scheduler or Gantt widget when a double click happens on a time range header element\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source Scheduler instance\n     * @param {TimeSpan} params.event.timeRangeRecord The record\n     * @param {MouseEvent} params.event.domEvent Browser event\n     */\n    (e: 'timeRangeHeaderDblClick', params: ((event: { source: Scheduler, timeRangeRecord: TimeSpan, domEvent: MouseEvent }) => void)|string): void\n    /**\n     * Triggered when time selection changes\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source The scheduler\n     * @param {Date} params.event.startDate The selected range start date, or `undefined`\n     * @param {Date} params.event.endDate The selected range end date, or `undefined`\n     */\n    (e: 'timeSelectionChange', params: ((event: { source: Scheduler, startDate: Date, endDate: Date }) => void)|string): void\n    /**\n     * Triggered when clicking the time selection header element\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source The scheduler\n     * @param {Date} params.event.startDate The selected range start date\n     * @param {Date} params.event.endDate The selected range end date\n     * @param {Event} params.event.domEvent The raw DOM event\n     */\n    (e: 'timeSelectionElementClick', params: ((event: { source: Scheduler, startDate: Date, endDate: Date, domEvent: Event }) => void)|string): void\n    /**\n     * Group expanded or collapsed\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Model} params.event.groupRecord Group record\n     * @param {boolean} params.event.collapse Collapsed (true) or expanded (false)\n     * @param {boolean} params.event.allRecords True if this event is part of toggling all groups\n     */\n    (e: 'toggleGroup', params: ((event: { groupRecord: Model, collapse: boolean, allRecords?: boolean }) => void)|string): void\n    /**\n     * Fired after a parent node record toggles its collapsed state.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Model} params.event.record The record being toggled.\n     * @param {boolean} params.event.collapse `true` if the node is being collapsed.\n     */\n    (e: 'toggleNode', params: ((event: { record: Model, collapse: boolean }) => void)|string): void\n    /**\n     * A header [tool](https://bryntum.com/products/schedulerpro/docs/api/Core/widget/Panel#config-tools) has been clicked.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Tool} params.event.source This Panel.\n     * @param {Tool} params.event.tool The tool which is being clicked.\n     */\n    (e: 'toolClick', params: ((event: { source: Tool, tool: Tool }) => void)|string): void\n    /**\n     * Fires when row locking is disabled.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {GridBase} params.event.clone The locked clone that will be destroyed\n     */\n    (e: 'unlockRows', params: ((event: { clone: GridBase }) => void)|string): void\n    /**\n     * Fires when un-splitting the Grid.\n     */\n    (e: 'unsplit', params: (() => void)|string): void\n    /**\n     * Fired when the range of dates visible within the viewport changes. This will be when\n     * scrolling along a time axis.\n     * ...\n     * [View online docs...](https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/widget/Timeline#event-visibleDateRangeChange)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler} params.event.source This Scheduler instance.\n     * @param {object} params.event.old The old date range\n     * @param {Date} params.event.old.startDate the old start date.\n     * @param {Date} params.event.old.endDate the old end date.\n     * @param {object} params.event.new The new date range\n     * @param {Date} params.event.new.startDate the new start date.\n     * @param {Date} params.event.new.endDate the new end date.\n     */\n    (e: 'visibleDateRangeChange', params: ((event: { source: Scheduler, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string): void\n}>();\n\nconst widgetData = {\n    instanceClass : Timeline,\n    instanceName  : 'Timeline',\n\n    configNames   : [\n        'adopt',\n        'allowCreate',\n        'animateRemovingRows',\n        'animateTreeNodeToggle',\n        'ariaDescription',\n        'ariaLabel',\n        'autoAdjustTimeAxis',\n        'autoHeight',\n        'bbar',\n        'bodyCls',\n        'bubbleEvents',\n        'bufferCoef',\n        'bufferThreshold',\n        'callOnFunctions',\n        'collapsible',\n        'config',\n        'contentElementCls',\n        'contextMenuTriggerEvent',\n        'createEventOnDblClick',\n        'creationTooltip',\n        'crudManagerClass',\n        'date',\n        'defaultRegion',\n        'defaultResourceImageName',\n        'descriptionRenderer',\n        'deselectAllOnScheduleClick',\n        'deselectOnClick',\n        'destroyStore',\n        'destroyStores',\n        'disableGridColumnIdWarning',\n        'disableGridRowModelWarning',\n        'dock',\n        'durationDisplayPrecision',\n        'enableDeleteKey',\n        'enableRecurringEvents',\n        'enableSticky',\n        'enableTextSelection',\n        'enableTransactionalFeatures',\n        'endParamName',\n        'eventBarTextField',\n        'eventRenderer',\n        'eventRendererThisObj',\n        'eventSelectionDisabled',\n        'fillLastColumn',\n        'fixedRowHeight',\n        'footer',\n        'fullRowRefresh',\n        'getDateConstraints',\n        'getRowHeight',\n        'header',\n        'hideHorizontalScrollbar',\n        'highlightPredecessors',\n        'highlightSuccessors',\n        'hoverCls',\n        'ignoreDomEventsWhileScrolling',\n        'ignoreParentReadOnly',\n        'infiniteScroll',\n        'listeners',\n        'loadMask',\n        'loadMaskDefaults',\n        'loadMaskError',\n        'localizable',\n        'maintainSelectionOnDatasetChange',\n        'managedEventSizing',\n        'maskDefaults',\n        'masked',\n        'maxTimeAxisUnit',\n        'mode',\n        'monitorResize',\n        'multiEventSelect',\n        'narrowEventWidth',\n        'owner',\n        'partner',\n        'passStartEndParameters',\n        'plugins',\n        'preCalculateHeightLimit',\n        'preserveFocusOnDatasetChange',\n        'preserveScrollOnDatasetChange',\n        'preventTooltipOnTouch',\n        'range',\n        'relayStoreEvents',\n        'resizeToFitIncludesHeader',\n        'resourceColumns',\n        'resourceImageExtension',\n        'resourceImagePath',\n        'resourceTimeRangeRenderer',\n        'responsiveLevels',\n        'ripple',\n        'rootElement',\n        'scrollerClass',\n        'scrollExtensionThreshold',\n        'scrollManager',\n        'showCreationTooltip',\n        'showDirty',\n        'showEventColorPickers',\n        'showLagInTooltip',\n        'showRecurringUI',\n        'snapRelativeToEventStartDate',\n        'startParamName',\n        'stateful',\n        'statefulEvents',\n        'stateId',\n        'stateProvider',\n        'stepUnit',\n        'stickyHeaders',\n        'strips',\n        'subGridConfigs',\n        'suppressFit',\n        'syncMask',\n        'tab',\n        'tbar',\n        'terminalCls',\n        'terminalSides',\n        'timeAxis',\n        'triggerSelectionChangeOnRemove',\n        'type',\n        'ui',\n        'verticalTimeAxisColumn',\n        'visibleZoomFactor',\n        'weekStartDay',\n        'weight',\n        'zoomKeepsOriginalTimespan',\n        'zoomOnMouseWheel',\n        'zoomOnTimeAxisDoubleClick'\n    ],\n    propertyConfigNames : [\n        'alignSelf',\n        'allowDropOnEventBar',\n        'allowOverlap',\n        'appendTo',\n        'ariaLive',\n        'assignments',\n        'assignmentStore',\n        'barMargin',\n        'cls',\n        'collapsed',\n        'columnLines',\n        'columns',\n        'creationTooltipTemplate',\n        'crudManager',\n        'data',\n        'dataset',\n        'dateFormat',\n        'dateSeparator',\n        'dependencies',\n        'dependencyStore',\n        'descriptionFormat',\n        'disabled',\n        'displayDateFormat',\n        'emptyText',\n        'enableEventAnimations',\n        'enableUndoRedoKeys',\n        'endDate',\n        'eventColor',\n        'eventLayout',\n        'events',\n        'eventStore',\n        'eventStyle',\n        'extraData',\n        'fillTicks',\n        'flex',\n        'forceFit',\n        'height',\n        'hidden',\n        'hideFooters',\n        'hideHeaders',\n        'hideRowHover',\n        'id',\n        'insertBefore',\n        'insertFirst',\n        'isEventSelectable',\n        'keyMap',\n        'longPressTime',\n        'margin',\n        'maxHeight',\n        'maxWidth',\n        'maxZoomLevel',\n        'milestoneAlign',\n        'milestoneCharWidth',\n        'milestoneLayoutMode',\n        'milestoneTextPosition',\n        'minHeight',\n        'minWidth',\n        'minZoomLevel',\n        'onAfterDependencyCreateDrop',\n        'onAfterDependencySave',\n        'onAfterDragCreate',\n        'onAfterEventDrop',\n        'onAfterEventEdit',\n        'onAfterEventSave',\n        'onAssignmentSelectionChange',\n        'onBeforeAssignmentDelete',\n        'onBeforeAssignmentSelectionChange',\n        'onBeforeCancelCellEdit',\n        'onBeforeCellDelete',\n        'onBeforeCellEditStart',\n        'onBeforeColumnDragStart',\n        'onBeforeColumnDropFinalize',\n        'onBeforeColumnResize',\n        'onBeforeCopy',\n        'onBeforeCSVExport',\n        'onBeforeDependencyAdd',\n        'onBeforeDependencyCreateDrag',\n        'onBeforeDependencyCreateFinalize',\n        'onBeforeDependencyDelete',\n        'onBeforeDependencyEdit',\n        'onBeforeDependencyEditShow',\n        'onBeforeDependencySave',\n        'onBeforeDestroy',\n        'onBeforeDragCreate',\n        'onBeforeDragCreateFinalize',\n        'onBeforeEventAdd',\n        'onBeforeEventDelete',\n        'onBeforeEventDrag',\n        'onBeforeEventDragSelect',\n        'onBeforeEventDropFinalize',\n        'onBeforeEventEdit',\n        'onBeforeEventEditShow',\n        'onBeforeEventResize',\n        'onBeforeEventResizeFinalize',\n        'onBeforeEventSave',\n        'onBeforeEventSelectionChange',\n        'onBeforeExcelExport',\n        'onBeforeFillHandleDragStart',\n        'onBeforeFinishCellEdit',\n        'onBeforeHide',\n        'onBeforePan',\n        'onBeforePaste',\n        'onBeforePdfExport',\n        'onBeforePresetChange',\n        'onBeforeRenderRow',\n        'onBeforeRenderRows',\n        'onBeforeRowCollapse',\n        'onBeforeRowExpand',\n        'onBeforeSelectionChange',\n        'onBeforeSetRecord',\n        'onBeforeShow',\n        'onBeforeShowTerminals',\n        'onBeforeToggleGroup',\n        'onBeforeToggleNode',\n        'onCancelCellEdit',\n        'onCatchAll',\n        'onCellClick',\n        'onCellContextMenu',\n        'onCellDblClick',\n        'onCellMenuBeforeShow',\n        'onCellMenuItem',\n        'onCellMenuShow',\n        'onCellMenuToggleItem',\n        'onCellMouseEnter',\n        'onCellMouseLeave',\n        'onCellMouseOut',\n        'onCellMouseOver',\n        'onCollapse',\n        'onCollapseNode',\n        'onColumnDrag',\n        'onColumnDragStart',\n        'onColumnDrop',\n        'onColumnResize',\n        'onColumnResizeStart',\n        'onContextMenuItem',\n        'onContextMenuToggleItem',\n        'onCopy',\n        'onCurrentTimelineUpdate',\n        'onDataChange',\n        'onDateRangeChange',\n        'onDependenciesDrawn',\n        'onDependencyClick',\n        'onDependencyContextMenu',\n        'onDependencyCreateDragStart',\n        'onDependencyCreateDrop',\n        'onDependencyDblClick',\n        'onDependencyMouseOut',\n        'onDependencyMouseOver',\n        'onDependencyValidationComplete',\n        'onDependencyValidationStart',\n        'onDestroy',\n        'onDragCreateEnd',\n        'onDragCreateStart',\n        'onDragSelecting',\n        'onEventAutoCreated',\n        'onEventClick',\n        'onEventContextMenu',\n        'onEventDblClick',\n        'onEventDrag',\n        'onEventDragAbort',\n        'onEventDragModeChange',\n        'onEventDragReset',\n        'onEventDragStart',\n        'onEventDrop',\n        'onEventEditBeforeSetRecord',\n        'onEventKeyDown',\n        'onEventKeyUp',\n        'onEventMenuBeforeShow',\n        'onEventMenuItem',\n        'onEventMenuShow',\n        'onEventMouseDown',\n        'onEventMouseEnter',\n        'onEventMouseLeave',\n        'onEventMouseOut',\n        'onEventMouseOver',\n        'onEventMouseUp',\n        'onEventPartialResize',\n        'onEventResizeEnd',\n        'onEventResizeStart',\n        'onEventSelectionChange',\n        'onExpand',\n        'onExpandNode',\n        'onFileDrop',\n        'onFillHandleBeforeDragFinalize',\n        'onFillHandleDrag',\n        'onFillHandleDragAbort',\n        'onFillHandleDragEnd',\n        'onFillHandleDragStart',\n        'onFinishCellEdit',\n        'onFocusIn',\n        'onFocusOut',\n        'onGridRowBeforeDragStart',\n        'onGridRowBeforeDropFinalize',\n        'onGridRowDrag',\n        'onGridRowDragAbort',\n        'onGridRowDragStart',\n        'onGridRowDrop',\n        'onHeaderClick',\n        'onHeaderMenuBeforeShow',\n        'onHeaderMenuItem',\n        'onHeaderMenuShow',\n        'onHeaderMenuToggleItem',\n        'onHide',\n        'onLockRows',\n        'onMouseOut',\n        'onMouseOver',\n        'onNavigate',\n        'onPaint',\n        'onPaste',\n        'onPasteNotAllowed',\n        'onPdfExport',\n        'onPresetChange',\n        'onReadOnly',\n        'onRecompose',\n        'onReleaseEvent',\n        'onRenderEvent',\n        'onRenderRow',\n        'onRenderRows',\n        'onResize',\n        'onResourceHeaderClick',\n        'onResourceHeaderContextmenu',\n        'onResourceHeaderDblclick',\n        'onResourceMenuBeforeShow',\n        'onResourceMenuItem',\n        'onResourceMenuShow',\n        'onResourceMenuToggleItem',\n        'onResourceTimeRangeClick',\n        'onResourceTimeRangeContextMenu',\n        'onResourceTimeRangeDblClick',\n        'onResourceTimeRangeMouseDown',\n        'onResourceTimeRangeMouseOut',\n        'onResourceTimeRangeMouseOver',\n        'onResourceTimeRangeMouseUp',\n        'onResponsive',\n        'onRowCollapse',\n        'onRowExpand',\n        'onRowMouseEnter',\n        'onRowMouseLeave',\n        'onScheduleClick',\n        'onScheduleContextMenu',\n        'onScheduleDblClick',\n        'onScheduleMenuBeforeShow',\n        'onScheduleMenuItem',\n        'onScheduleMenuShow',\n        'onScheduleMouseDown',\n        'onScheduleMouseEnter',\n        'onScheduleMouseLeave',\n        'onScheduleMouseMove',\n        'onScheduleMouseUp',\n        'onScroll',\n        'onScrollButtonClick',\n        'onSelectionChange',\n        'onSelectionModeChange',\n        'onShow',\n        'onSplit',\n        'onSplitterCollapseClick',\n        'onSplitterDragEnd',\n        'onSplitterDragStart',\n        'onSplitterExpandClick',\n        'onStartCellEdit',\n        'onSubGridCollapse',\n        'onSubGridExpand',\n        'onTimeAxisChange',\n        'onTimeAxisHeaderClick',\n        'onTimeAxisHeaderContextMenu',\n        'onTimeAxisHeaderDblClick',\n        'onTimeAxisHeaderMenuBeforeShow',\n        'onTimeAxisHeaderMenuItem',\n        'onTimeAxisHeaderMenuShow',\n        'onTimelineContextChange',\n        'onTimelineViewportResize',\n        'onTimeRangeHeaderClick',\n        'onTimeRangeHeaderContextMenu',\n        'onTimeRangeHeaderDblClick',\n        'onTimeSelectionChange',\n        'onTimeSelectionElementClick',\n        'onToggleGroup',\n        'onToggleNode',\n        'onToolClick',\n        'onUnlockRows',\n        'onUnsplit',\n        'onVisibleDateRangeChange',\n        'overlappingEventSorter',\n        'preserveScroll',\n        'presets',\n        'project',\n        'readOnly',\n        'resourceMargin',\n        'resources',\n        'resourceStore',\n        'resourceTimeRanges',\n        'resourceTimeRangeStore',\n        'rowHeight',\n        'rowLines',\n        'scrollable',\n        'selectionMode',\n        'selectResourceOnEventNavigate',\n        'selectResourceOnScheduleClick',\n        'showTooltip',\n        'snap',\n        'startDate',\n        'store',\n        'terminalHideDelay',\n        'terminalOffset',\n        'terminalShowDelay',\n        'terminalSize',\n        'tickSize',\n        'timeRanges',\n        'timeRangeStore',\n        'title',\n        'tools',\n        'tooltipTemplate',\n        'transitionDuration',\n        'updateTimelineContextOnScroll',\n        'useContextualRecurrenceRules',\n        'useInitialAnimation',\n        'viewPreset',\n        'visibleDate',\n        'width',\n        'workingTime'\n    ],\n    propertyNames : [\n        'accessibility',\n        'isEngineReady',\n        'originalStore',\n        'scrollLeft',\n        'scrollTop',\n        'scrollX',\n        'selectedAssignments',\n        'selectedCell',\n        'selectedCells',\n        'selectedEvents',\n        'selectedRecord',\n        'selectedRecords',\n        'selectedRows',\n        'state',\n        'timeResolution',\n        'timeZone',\n        'tooltip',\n        'zoomLevel'\n    ],\n    eventNames : [\n        'afterDependencyCreateDrop',\n        'afterDependencySave',\n        'afterDragCreate',\n        'afterEventDrop',\n        'afterEventEdit',\n        'afterEventSave',\n        'assignmentSelectionChange',\n        'beforeAssignmentDelete',\n        'beforeAssignmentSelectionChange',\n        'beforeCancelCellEdit',\n        'beforeCellDelete',\n        'beforeCellEditStart',\n        'beforeColumnDragStart',\n        'beforeColumnDropFinalize',\n        'beforeColumnResize',\n        'beforeCopy',\n        'beforeCSVExport',\n        'beforeDependencyAdd',\n        'beforeDependencyCreateDrag',\n        'beforeDependencyCreateFinalize',\n        'beforeDependencyDelete',\n        'beforeDependencyEdit',\n        'beforeDependencyEditShow',\n        'beforeDependencySave',\n        'beforeDestroy',\n        'beforeDragCreate',\n        'beforeDragCreateFinalize',\n        'beforeEventAdd',\n        'beforeEventDelete',\n        'beforeEventDrag',\n        'beforeEventDragSelect',\n        'beforeEventDropFinalize',\n        'beforeEventEdit',\n        'beforeEventEditShow',\n        'beforeEventResize',\n        'beforeEventResizeFinalize',\n        'beforeEventSave',\n        'beforeEventSelectionChange',\n        'beforeExcelExport',\n        'beforeFillHandleDragStart',\n        'beforeFinishCellEdit',\n        'beforeHide',\n        'beforePan',\n        'beforePaste',\n        'beforePdfExport',\n        'beforePresetChange',\n        'beforeRenderRow',\n        'beforeRenderRows',\n        'beforeRowCollapse',\n        'beforeRowExpand',\n        'beforeSelectionChange',\n        'beforeSetRecord',\n        'beforeShow',\n        'beforeShowTerminals',\n        'beforeToggleGroup',\n        'beforeToggleNode',\n        'cancelCellEdit',\n        'catchAll',\n        'cellClick',\n        'cellContextMenu',\n        'cellDblClick',\n        'cellMenuBeforeShow',\n        'cellMenuItem',\n        'cellMenuShow',\n        'cellMenuToggleItem',\n        'cellMouseEnter',\n        'cellMouseLeave',\n        'cellMouseOut',\n        'cellMouseOver',\n        'collapse',\n        'collapseNode',\n        'columnDrag',\n        'columnDragStart',\n        'columnDrop',\n        'columnResize',\n        'columnResizeStart',\n        'contextMenuItem',\n        'contextMenuToggleItem',\n        'copy',\n        'currentTimelineUpdate',\n        'dataChange',\n        'dateRangeChange',\n        'dependenciesDrawn',\n        'dependencyClick',\n        'dependencyContextMenu',\n        'dependencyCreateDragStart',\n        'dependencyCreateDrop',\n        'dependencyDblClick',\n        'dependencyMouseOut',\n        'dependencyMouseOver',\n        'dependencyValidationComplete',\n        'dependencyValidationStart',\n        'destroy',\n        'dragCreateEnd',\n        'dragCreateStart',\n        'dragSelecting',\n        'eventAutoCreated',\n        'eventClick',\n        'eventContextMenu',\n        'eventDblClick',\n        'eventDrag',\n        'eventDragAbort',\n        'eventDragModeChange',\n        'eventDragReset',\n        'eventDragStart',\n        'eventDrop',\n        'eventEditBeforeSetRecord',\n        'eventKeyDown',\n        'eventKeyUp',\n        'eventMenuBeforeShow',\n        'eventMenuItem',\n        'eventMenuShow',\n        'eventMouseDown',\n        'eventMouseEnter',\n        'eventMouseLeave',\n        'eventMouseOut',\n        'eventMouseOver',\n        'eventMouseUp',\n        'eventPartialResize',\n        'eventResizeEnd',\n        'eventResizeStart',\n        'eventSelectionChange',\n        'expand',\n        'expandNode',\n        'fileDrop',\n        'fillHandleBeforeDragFinalize',\n        'fillHandleDrag',\n        'fillHandleDragAbort',\n        'fillHandleDragEnd',\n        'fillHandleDragStart',\n        'finishCellEdit',\n        'focusIn',\n        'focusOut',\n        'gridRowBeforeDragStart',\n        'gridRowBeforeDropFinalize',\n        'gridRowDrag',\n        'gridRowDragAbort',\n        'gridRowDragStart',\n        'gridRowDrop',\n        'headerClick',\n        'headerMenuBeforeShow',\n        'headerMenuItem',\n        'headerMenuShow',\n        'headerMenuToggleItem',\n        'hide',\n        'lockRows',\n        'mouseOut',\n        'mouseOver',\n        'navigate',\n        'paint',\n        'paste',\n        'pasteNotAllowed',\n        'pdfExport',\n        'presetChange',\n        'recompose',\n        'releaseEvent',\n        'renderEvent',\n        'renderRow',\n        'renderRows',\n        'resize',\n        'resourceHeaderClick',\n        'resourceHeaderContextmenu',\n        'resourceHeaderDblclick',\n        'resourceMenuBeforeShow',\n        'resourceMenuItem',\n        'resourceMenuShow',\n        'resourceMenuToggleItem',\n        'resourceTimeRangeClick',\n        'resourceTimeRangeContextMenu',\n        'resourceTimeRangeDblClick',\n        'resourceTimeRangeMouseDown',\n        'resourceTimeRangeMouseOut',\n        'resourceTimeRangeMouseOver',\n        'resourceTimeRangeMouseUp',\n        'responsive',\n        'rowCollapse',\n        'rowExpand',\n        'rowMouseEnter',\n        'rowMouseLeave',\n        'scheduleClick',\n        'scheduleContextMenu',\n        'scheduleDblClick',\n        'scheduleMenuBeforeShow',\n        'scheduleMenuItem',\n        'scheduleMenuShow',\n        'scheduleMouseDown',\n        'scheduleMouseEnter',\n        'scheduleMouseLeave',\n        'scheduleMouseMove',\n        'scheduleMouseUp',\n        'scroll',\n        'scrollButtonClick',\n        'selectionChange',\n        'selectionModeChange',\n        'show',\n        'split',\n        'splitterCollapseClick',\n        'splitterDragEnd',\n        'splitterDragStart',\n        'splitterExpandClick',\n        'startCellEdit',\n        'subGridCollapse',\n        'subGridExpand',\n        'timeAxisChange',\n        'timeAxisHeaderClick',\n        'timeAxisHeaderContextMenu',\n        'timeAxisHeaderDblClick',\n        'timeAxisHeaderMenuBeforeShow',\n        'timeAxisHeaderMenuItem',\n        'timeAxisHeaderMenuShow',\n        'timelineContextChange',\n        'timelineViewportResize',\n        'timeRangeHeaderClick',\n        'timeRangeHeaderContextMenu',\n        'timeRangeHeaderDblClick',\n        'timeSelectionChange',\n        'timeSelectionElementClick',\n        'toggleGroup',\n        'toggleNode',\n        'toolClick',\n        'unlockRows',\n        'unsplit',\n        'visibleDateRangeChange'\n    ]\n};\n\nconst instance: {\n    value?: Timeline\n} = {};\n\nconst refElement = ref<HTMLDivElement>()!;\n// Storage for teleports (in-cell Vue component instances) automatically renderer by template\nconst teleports = ref(new Map());\n\n// Provide teleports for processCellContent\nprovide('teleports', teleports);\n\nonMounted(() => {\n\n    const me = getCurrentInstance()!;\n\n    instance.value = WrapperHelper.createWidget<typeof Timeline>({\n        me,\n        props,\n        emit,\n        widgetData,\n        element : refElement.value!,\n        toRaw\n    });\n\n    const watcher = (prop: string, callback: any) => watch(() => me.props[prop], callback);\n    WrapperHelper.watchProps(instance.value, widgetData, watcher);\n});\n\nonBeforeUnmount(() => {\n    // @ts-ignore\n    instance.value?.destroy?.();\n});\n\ndefineExpose({\n    instance,\n    refElement,\n    teleports\n});\n\n</script>\n"],"names":["props","__props","emit","__emit","widgetData","Timeline","instance","refElement","ref","teleports","provide","onMounted","me","getCurrentInstance","WrapperHelper","toRaw","watcher","prop","callback","watch","onBeforeUnmount","_b","_a","__expose"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA,UAAMA,IAAQC,GAotDRC,IAAOC,GAugFPC,IAAa;AAAA,MACf,eAAgBC;AAAA,MAChB,cAAgB;AAAA,MAEhB,aAAgqBAAsB;AAAA,QACleAAgB;AAAA,QACZ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MACA,YAAa;AAAA,QACT;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IAAA,GAGEC,IAEF,CAAA,GAEEC,IAAaC,KAEbC,IAAYD,EAAQ,oBAAA,IAAK,CAAA;AAG/B,WAAAE,EAAQ,aAAaD,CAAS,GAE9BE,EAAU,MAAM;AAEZ,YAAMC,IAAKC;AAEF,MAAAP,EAAA,QAAQQ,EAAc,aAA8B;AAAA,QACzD,IAAAF;AAAA,QACA,OAAAZ;AAAA,QACA,MAAAE;AAAA,QACA,YAAAE;AAAA,QACA,SAAUG,EAAW;AAAA,QACrB,OAAAQ;AAAA,MAAA,CACH;AAEK,YAAAC,IAAU,CAACC,GAAcC,MAAkBC,EAAM,MAAMP,EAAG,MAAMK,CAAI,GAAGC,CAAQ;AACrF,MAAAJ,EAAc,WAAWR,EAAS,OAAOF,GAAYY,CAAO;AAAA,IAAA,CAC/D,GAEDI,EAAgB,MAAM;;AAElB,OAAAC,KAAAC,IAAAhB,EAAS,UAAT,gBAAAgB,EAAgB,YAAhB,QAAAD,EAAA,KAAAC;AAAA,IAA0B,CAC7B,GAEYC,EAAA;AAAA,MACT,UAAAjB;AAAA,MACA,YAAAC;AAAA,MACA,WAAAE;AAAA,IAAA,CACH;;;;;;"}