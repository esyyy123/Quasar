/**
 * Vue 3 widget helper
 */
import { type ComponentInternalInstance } from 'vue';
interface RenderElement extends HTMLElement {
    vueKey: string;
}
export declare type Data = Record<string, unknown>;
declare type SuppressNew<T> = {
    [K in keyof T]: T[K];
};
declare type AnyConstructor<Instance extends object = object, Static extends object = object> = (new (...input: any[]) => Instance) & SuppressNew<Static>;
declare type AnyWidget = AnyConstructor<any, any>;
declare type RenderData = {
    record: any;
    row: any;
    column: any;
    cellElement: RenderElement;
};
export declare type WidgetData<T extends AnyWidget> = {
    instanceClass: T;
    instanceName: string;
    isView?: boolean;
    dataStores?: object;
    projectStores?: boolean;
    configNames: string[];
    propertyConfigNames: string[];
    propertyNames: string[];
    eventNames: string[];
    featureNames?: string[];
};
export declare type WidgetConfig<T extends AnyWidget> = {
    me?: ComponentInternalInstance;
    props: Data;
    widgetData: WidgetData<T>;
    emit: (...args: any[]) => any;
    element: HTMLDivElement;
    processCellContent?: Function;
    hasFrameworkRenderer?: Function;
    toRaw?: Function;
};
export declare type BryntumConfig = Record<string, any> & {
    vueComponent?: Object;
    listeners: Record<string, Function>;
    features: {};
    processCellContent: Function;
    hasFrameworkRenderer: Function;
};
export declare class WrapperHelper {
    /**
     * Development warning. Showed when environment is set to 'development'
     * @param {String} clsName vue component instance
     * @param {String} msg console message
     */
    static devWarning(clsName: string, msg: string): void;
    static devWarningContainer(clsName: string, containerParam: string): void;
    static devWarningConfigProp(clsName: string, prop: string): void;
    static devWarningUpdateProp(clsName: string, prop: string): void;
    /**
     * Creates bryntum component config from vue component
     * @param {Object} context
     * @param {Object} context.me vue component instance
     * @param {Object} context.props reference to props
     * @param {Object} context.widgetData reference to data
     * @param {Function} context.emit reference to emit
     * @param {Object} context.element HTML element
     * @param {Function} context.processCellContent cell renderer method
     * @param {Function} context.hasFrameworkRenderer checks presence of vue renderer
     * @param {Function} context.toRaw Vue fn to unwrap reactive object
     * @returns {Object} config object
     */
    static createConfig<T extends AnyWidget>({ me, props, widgetData, emit, element, processCellContent, hasFrameworkRenderer, toRaw }: WidgetConfig<T>): BryntumConfig;
    /**
     * Setup store events relay
     * @param {Object} data reference to data
     * @param {Object} instance bryntum widget instance
     */
    static relayStores(data: any, instance: any): void;
    /**
     * Creates bryntum Widget from vue component
     * @param {Object} config
     * @param {Object} config.me vue component instance
     * @param {Object} config.props reference to props
     * @param {Object} config.widgetData reference to data
     * @param {Function} config.emit reference to emit
     * @param {Object} config.element HTML element
     * @param {Function} config.processCellContent cell renderer method
     * @param {Function} config.hasFrameworkRenderer check the presence of vue renderer
     * @param {Function} config.toRaw Vue fn to unwrap reactive object
     * @returns {Object} widget object
     */
    static createWidget<T extends AnyWidget>(config: WidgetConfig<T>): InstanceType<T>;
    /**
     * Applies property value to Bryntum config or instance.
     * @param {Object} configOrInstance target object
     * @param {String} prop property name
     * @param {Object} value value
     * @param {Boolean} [isConfig] config setting mode
     * @param {Function} [toRaw] Vue fn to unwrap reactive object
     */
    static applyPropValue(configOrInstance: any, prop: string, value: any, isConfig?: boolean, toRaw?: Function): void;
    /**
     * Creates watches for vue component properties
     * @param {Object} me vue component instance
     * @param {Object} instance bryntum widget instance
     * @param {Object} props reference to props
     * @param {Object} data reference to data
     * @param {Function} watcher watch method reference (Accepts: prop and newValue)
     */
    static watchProps<T extends AnyWidget>(instance: InstanceType<T>, data: WidgetData<T>, watcher: (prop: string, callback: (value: any) => void) => void): void;
    /**
     * Cell renderer method
     * @param {Object} context
     * @param {RenderData} context.rendererData
     * @param {*} context.rendererHtml
     * @returns {Boolean}
     */
    static processCellContent({ rendererData, rendererHtml }: {
        rendererData: RenderData;
        rendererHtml: any;
    }): void;
    /**
     *
     * @param {Object} context
     * @param {*} context.cellContent Content to be rendered in cell (set by renderer)
     * @param {*} context.column Column being rendered
     * @returns {Boolean} `true` if there is a Vue Renderer in this cell, `false` otherwise
     */
    static hasFrameworkRenderer({ cellContent, column }: {
        cellContent: any;
        column: any;
    }): any;
}
export {};
