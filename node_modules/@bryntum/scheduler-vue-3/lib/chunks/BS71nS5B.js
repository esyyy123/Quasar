import { defineComponent as g, ref as o, provide as y, onMounted as b, getCurrentInstance as f, toRaw as k, onBeforeUnmount as S, openBlock as v, createElementBlock as x, watch as C } from "vue";
import { ResourceCombo as O } from "@bryntum/scheduler";
import { WrapperHelper as r } from "../helper/WrapperHelper.js";
const T = /* @__PURE__ */ g({
  __name: "BryntumResourceCombo",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoComplete: {},
    autoExpand: {},
    autoSelect: {},
    badge: {},
    bubbleEvents: {},
    callOnFunctions: {},
    caseSensitive: {},
    centered: {},
    chipView: {},
    clearable: {},
    clearTextOnPickerHide: {},
    clearTextOnSelection: {},
    clearWhenInputEmpty: {},
    cls: {},
    config: {},
    constrainTo: {},
    container: {},
    containValues: { type: [String, Function] },
    contentElementCls: {},
    createOnUnmatched: { type: [Function, String] },
    dataset: {},
    defaultBindProperty: {},
    disabled: {},
    displayField: {},
    displayValueRenderer: { type: Function },
    dock: {},
    draggable: {},
    editable: {},
    emptyText: {},
    encodeFilterParams: { type: Function },
    extraData: {},
    filterOnEnter: {},
    filterOperator: {},
    filterParamName: {},
    filterSelected: {},
    flex: {},
    floating: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    hidePickerOnSelect: {},
    hideTrigger: {},
    highlightExternalChange: {},
    hint: { type: [String, Function] },
    hintHtml: { type: [String, Function] },
    id: {},
    ignoreParentReadOnly: {},
    inline: {},
    inlinePicker: {},
    inputAlign: {},
    inputAttributes: {},
    inputType: {},
    inputWidth: {},
    insertBefore: {},
    insertFirst: {},
    items: {},
    keyMap: {},
    keyStrokeChangeDelay: {},
    keyStrokeFilterDelay: {},
    label: {},
    labelCls: {},
    labelPosition: {},
    labels: {},
    labelWidth: {},
    listCls: {},
    listeners: {},
    listItemTpl: { type: Function },
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxLength: {},
    maxWidth: {},
    minChars: {},
    minHeight: {},
    minLength: {},
    minWidth: {},
    monitorResize: {},
    multiSelect: {},
    multiValueSeparator: {},
    name: {},
    overlayAnchor: {},
    owner: {},
    picker: {},
    pickerAlignElement: {},
    pickerWidth: {},
    placeholder: {},
    positioned: {},
    preventTooltipOnTouch: {},
    primaryFilter: {},
    readOnly: {},
    relayStoreEvents: {},
    required: {},
    revertOnEscape: {},
    ripple: {},
    rootElement: {},
    scrollAction: {},
    showAnimation: {},
    showEventColor: {},
    showTooltipWhenDisabled: {},
    skipValidation: {},
    spellCheck: {},
    store: {},
    tab: {},
    tabIndex: {},
    textAlign: {},
    title: {},
    tooltip: {},
    triggerAction: {},
    triggers: {},
    type: {},
    ui: {},
    validateFilter: {},
    validateOnInput: {},
    value: {},
    valueField: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["action", "beforeDestroy", "beforeHide", "beforeShow", "catchAll", "change", "clear", "destroy", "focusIn", "focusOut", "hide", "paint", "recompose", "resize", "select", "show", "trigger"],
  setup(s, { expose: c, emit: p }) {
    const d = s, m = p, a = {
      instanceClass: O,
      instanceName: "ResourceCombo",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoComplete",
        "autoExpand",
        "autoSelect",
        "bubbleEvents",
        "callOnFunctions",
        "caseSensitive",
        "centered",
        "chipView",
        "clearable",
        "clearTextOnPickerHide",
        "clearTextOnSelection",
        "clearWhenInputEmpty",
        "config",
        "constrainTo",
        "container",
        "containValues",
        "contentElementCls",
        "createOnUnmatched",
        "defaultBindProperty",
        "displayField",
        "displayValueRenderer",
        "dock",
        "draggable",
        "emptyText",
        "encodeFilterParams",
        "filterOnEnter",
        "filterParamName",
        "filterSelected",
        "floating",
        "hideAnimation",
        "hidePickerOnSelect",
        "hideTrigger",
        "highlightExternalChange",
        "hint",
        "hintHtml",
        "ignoreParentReadOnly",
        "inline",
        "inlinePicker",
        "inputAlign",
        "inputAttributes",
        "inputType",
        "inputWidth",
        "items",
        "keyStrokeChangeDelay",
        "keyStrokeFilterDelay",
        "labelCls",
        "labelPosition",
        "labels",
        "labelWidth",
        "listCls",
        "listeners",
        "listItemTpl",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "maxLength",
        "minChars",
        "minLength",
        "monitorResize",
        "multiSelect",
        "multiValueSeparator",
        "name",
        "overlayAnchor",
        "owner",
        "pickerAlignElement",
        "pickerWidth",
        "placeholder",
        "positioned",
        "preventTooltipOnTouch",
        "primaryFilter",
        "relayStoreEvents",
        "required",
        "revertOnEscape",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showEventColor",
        "showTooltipWhenDisabled",
        "skipValidation",
        "spellCheck",
        "tab",
        "tabIndex",
        "textAlign",
        "title",
        "triggerAction",
        "type",
        "ui",
        "validateFilter",
        "validateOnInput",
        "valueField",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "badge",
        "cls",
        "dataset",
        "disabled",
        "editable",
        "extraData",
        "filterOperator",
        "flex",
        "height",
        "hidden",
        "id",
        "insertBefore",
        "insertFirst",
        "keyMap",
        "label",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onAction",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeShow",
        "onCatchAll",
        "onChange",
        "onClear",
        "onDestroy",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onInput",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onSelect",
        "onShow",
        "onTrigger",
        "picker",
        "readOnly",
        "store",
        "tooltip",
        "triggers",
        "value",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "accessibility",
        "anchorSize",
        "content",
        "html",
        "input",
        "scrollable"
      ],
      eventNames: [
        "action",
        "beforeDestroy",
        "beforeHide",
        "beforeShow",
        "catchAll",
        "change",
        "clear",
        "destroy",
        "focusIn",
        "focusOut",
        "hide",
        "paint",
        "recompose",
        "resize",
        "select",
        "show",
        "trigger"
      ]
    }, i = {}, n = o(), l = o(/* @__PURE__ */ new Map());
    return y("teleports", l), b(() => {
      const e = f();
      i.value = r.createWidget({
        me: e,
        props: d,
        emit: m,
        widgetData: a,
        element: n.value,
        toRaw: k
      });
      const t = (h, u) => C(() => e.props[h], u);
      r.watchProps(i.value, a, t);
    }), S(() => {
      var e, t;
      (t = (e = i.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), c({
      instance: i,
      refElement: n,
      teleports: l
    }), (e, t) => (v(), x("div", {
      ref_key: "refElement",
      ref: n
    }, null, 512));
  }
});
export {
  T as _
};
//# sourceMappingURL=BS71nS5B.js.map
