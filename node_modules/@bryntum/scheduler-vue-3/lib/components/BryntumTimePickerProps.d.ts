import type { AlignSpec, Base, ContainerItemConfig, ContainerLayoutConfig, DomConfig, MaskConfig, MenuItemConfig, Model, PagingToolbarConfig, PanelCollapserConfig, PanelCollapserOverlayConfig, PanelHeader, Rectangle, Scroller, ScrollerConfig, StateProvider, TabConfig, TimePickerListeners, ToolConfig, ToolbarConfig, TooltipConfig, Widget } from '@bryntum/scheduler';
export declare type BryntumTimePickerProps = {
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-adopt)
     */
    adopt?: HTMLElement | string;
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/scheduler/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-align)
     */
    align?: AlignSpec | string;
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/scheduler/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf?: string;
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/scheduler/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor?: Boolean;
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/scheduler/docs/api/Core/widget/Widget#property-element).
     */
    appendTo?: HTMLElement | string;
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-ariaDescription)
     */
    ariaDescription?: string;
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-ariaLabel)
     */
    ariaLabel?: string;
    /**
     * The `aria-live` value for this widget.
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-ariaLive)
     */
    ariaLive?: string;
    /**
     * Update assigned [record](https://bryntum.com/products/scheduler/docs/api/Core/widget/Container#config-record) automatically on field changes
     */
    autoUpdateRecord?: Boolean;
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/scheduler/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar. Another way to add a bbar is to use [strips](https://bryntum.com/products/scheduler/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-bbar)
     */
    bbar?: (ContainerItemConfig | string)[] | ToolbarConfig | PagingToolbarConfig;
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-bodyCls)
     */
    bodyCls?: string | object;
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-bubbleEvents)
     */
    bubbleEvents?: object;
    /**
     * Set to `false` to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-callOnFunctions)
     */
    callOnFunctions?: Boolean;
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/scheduler/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered?: Boolean;
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-cls)
     */
    cls?: string | object;
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/scheduler/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed?: Boolean;
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/scheduler/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-collapsible)
     */
    collapsible?: Boolean | PanelCollapserConfig | PanelCollapserOverlayConfig;
    config?: object;
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/scheduler/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo?: HTMLElement | Widget | Rectangle;
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/scheduler/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/scheduler/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content?: string;
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/scheduler/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-contentElementCls)
     */
    contentElementCls?: string | object;
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset?: Record<string, string>;
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty?: string;
    /**
     * A [query](https://bryntum.com/products/scheduler/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-defaultFocus)
     * @param {Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus?: (widget: Widget) => Boolean;
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults?: ContainerItemConfig;
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/scheduler/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-disabled)
     */
    disabled?: Boolean | 'inert';
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/scheduler/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/scheduler/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-dock)
     */
    dock?: 'top' | 'bottom' | 'left' | 'right' | 'start' | 'end' | 'header' | 'pre-header' | object;
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/scheduler/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-draggable)
     */
    draggable?: Boolean | {
        handleSelector?: string;
    };
    extraData?: any;
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/scheduler/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex?: number | string;
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating?: Boolean;
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/scheduler/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-footer)
     */
    footer?: {
        dock?: 'top' | 'right' | 'bottom' | 'left' | 'start' | 'end';
        html?: string;
        cls?: string;
    } | string;
    /**
     * Time format. Used to set appropriate 12/24 hour format to display.
     * See [DateHelper](https://bryntum.com/products/scheduler/docs/api/Core/helper/DateHelper#function-format-static) for formatting options.
     */
    format?: string;
    /**
     * A config [object](https://bryntum.com/products/scheduler/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-header)
     */
    header?: string | Boolean | PanelHeader;
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height?: string | number;
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden?: Boolean;
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/scheduler/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-hideAnimation)
     */
    hideAnimation?: Boolean | object;
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-hideWhenEmpty)
     */
    hideWhenEmpty?: Boolean;
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time).
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html?: string | ((widget: Widget) => string) | DomConfig | DomConfig[];
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls?: string | object;
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id?: string;
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly?: Boolean;
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/scheduler/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore?: HTMLElement | string;
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/scheduler/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst?: HTMLElement | string;
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls?: string;
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-items)
     */
    items?: Record<string, ContainerItemConfig | MenuItemConfig | Boolean | null> | (ContainerItemConfig | MenuItemConfig | Widget)[];
    /**
     * An object whose keys are the [key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) name
     * and optional modifier prefixes: `'Ctrl+'`, `'Alt+'`, `'Meta+'`, and `'Shift+'` (case-insensitive). The values
     * are the name of the instance method to call when the keystroke is received.
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-keyMap)
     */
    keyMap?: Record<string, string>;
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-layout)
     */
    layout?: string | ContainerLayoutConfig;
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/scheduler/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-layoutStyle)
     */
    layoutStyle?: object;
    /**
     * An array of [child item](https://bryntum.com/products/scheduler/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-lazyItems)
     */
    lazyItems?: Record<string, ContainerItemConfig> | ContainerItemConfig[] | Widget[];
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-listeners)
     */
    listeners?: TimePickerListeners;
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-localeClass)
     */
    localeClass?: typeof Base;
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable?: Boolean;
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-localizableProperties)
     */
    localizableProperties?: string[];
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin?: number | string;
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/scheduler/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/scheduler/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults?: MaskConfig;
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/scheduler/docs/api/Core/widget/Mask) config object.
     */
    masked?: Boolean | string | MaskConfig;
    /**
     * Max value, which can be a Date or a string. If a string is specified, it will be converted using the
     * specified [format](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-format)
     */
    max?: Date | string;
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/scheduler/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight?: string | number;
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/scheduler/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-maximizeOnMobile)
     */
    maximizeOnMobile?: number | string;
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/scheduler/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth?: string | number;
    /**
     * Min value, which can be a Date or a string. If a string is specified, it will be converted using the
     * specified [format](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-format)
     */
    min?: Date | string;
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/scheduler/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight?: string | number;
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/scheduler/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth?: string | number;
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-monitorResize)
     */
    monitorResize?: Boolean;
    /**
     * An object containing default config objects which may be referenced by name in the [items](https://bryntum.com/products/scheduler/docs/api/Core/widget/Container#config-items)
     * config. For example, a specialized [Menu](https://bryntum.com/products/scheduler/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-namedItems)
     */
    namedItems?: Record<string, ContainerItemConfig>;
    /**
     * The owning Widget of this Widget. If this Widget is directly contained (that is, it is one of the
     * [items](https://bryntum.com/products/scheduler/docs/api/Core/widget/Container#property-items) of a Container), this config will be ignored. In this case
     * the owner is <strong>always</strong> the encapsulating Container.
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-owner)
     */
    owner?: Widget;
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/scheduler/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/scheduler/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-positioned)
     */
    positioned?: Boolean;
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch?: Boolean;
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-readOnly)
     */
    readOnly?: Boolean;
    /**
     * [Record](https://bryntum.com/products/scheduler/docs/api/Core/data/Model) whose values will be used to populate fields in the container.
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-record)
     */
    record?: Model;
    relayStoreEvents?: Boolean;
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/scheduler/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-ripple)
     */
    ripple?: Boolean | {
        delegate?: string;
        color?: string;
        radius?: number;
        clip?: string;
    };
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot. If not inside a web component, set it to `document.body`
     */
    rootElement?: ShadowRoot | HTMLElement;
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-scrollable)
     */
    scrollable?: Boolean | ScrollerConfig | Scroller;
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to `true`).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction?: 'hide' | 'realign' | null;
    /**
     * By default the seconds field is not displayed. If you require seconds to be visible,
     * configure this as `true`
     */
    seconds?: Boolean;
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/scheduler/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-showAnimation)
     */
    showAnimation?: Boolean | object;
    /**
     * Set to `false` to not show the tooltip when this widget is [disabled](https://bryntum.com/products/scheduler/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled?: Boolean;
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-stateful)
     */
    stateful?: Boolean | object | string[];
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/scheduler/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-statefulEvents)
     */
    statefulEvents?: object | string[];
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/scheduler/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/scheduler/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-stateId)
     */
    stateId?: string;
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/scheduler/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/scheduler/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-stateProvider)
     */
    stateProvider?: StateProvider;
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/scheduler/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping?: Boolean;
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/scheduler/docs/api/Core/widget/Toolbar). If you want to pass an array, you can use
     * the toolbar's [items](https://bryntum.com/products/scheduler/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-strips)
     */
    strips?: Record<string, ContainerItemConfig>;
    /**
     * A configuration for the [tab](https://bryntum.com/products/scheduler/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/scheduler/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-tab)
     */
    tab?: Boolean | TabConfig;
    /**
     * The tag name of this Widget's root element
     */
    tag?: string;
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/scheduler/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * This creates a toolbar docked to the top of the panel immediately below the header.
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-tbar)
     */
    tbar?: (ContainerItemConfig | string)[] | ToolbarConfig | PagingToolbarConfig;
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-textAlign)
     */
    textAlign?: 'left' | 'center' | 'right' | 'start' | 'end';
    /**
     * Specify `true` for a container used to show text markup. It will apply the CSS class `b-text-content`
     * which specifies a default max-width that makes long text more readable.
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-textContent)
     */
    textContent?: Boolean;
    /**
     * A title to display in the header or owning TabPanel. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-title)
     */
    title?: string;
    /**
     * The [tools](https://bryntum.com/products/scheduler/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/scheduler/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-tools)
     */
    tools?: Record<string, ToolConfig>;
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-tooltip)
     */
    tooltip?: string | TooltipConfig;
    /**
     * By default, tabbing within a Panel is not contained, ie you can TAB out of the Panel
     * forwards or backwards.
     * Configure this as `true` to disallow tabbing out of the Panel, and make tabbing circular within this Panel.
     */
    trapFocus?: Boolean;
    type?: 'timepicker';
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-ui)
     */
    ui?: 'plain' | 'toolbar' | string | object;
    /**
     * Time value, which can be a Date or a string. If a string is specified, it will be converted using the
     * specified [format](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-format)
     */
    value?: Date | string;
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/scheduler/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight?: number;
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width?: string | number;
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-x)
     */
    x?: number;
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/scheduler/docs/api/Core/widget/TimePicker#config-y)
     */
    y?: number;
};
